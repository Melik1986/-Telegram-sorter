"""
Configuration file for API keys and settings.
"""

import os

# Telegram bot token
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# OpenAI API key configuration
# To enable AI classification, provide your OpenAI API key here
OPENAI_API_KEY_DIRECT = None

def is_valid_openai_key(key):
    """Check if the API key is in valid OpenAI format."""
    if not key:
        return False
    return key.startswith('sk-')

def get_openai_key():
    """Get the correct OpenAI API key."""
    # Check various sources for a valid OpenAI key
    sources = [
        OPENAI_API_KEY_DIRECT,
        os.getenv('OPENAI_API_KEY_OVERRIDE'),
        os.getenv('OPENAI_API_KEY_NEW')
    ]
    
    for key in sources:
        if key and is_valid_openai_key(key):
            return key
    
    # Check if environment key is valid format
    env_key = os.getenv('OPENAI_API_KEY')
    if env_key and is_valid_openai_key(env_key):
        return env_key
    
    return None

def get_telegram_token():
    """Get Telegram bot token from environment variables."""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")
    return token

def validate_api_keys():
    """Validate all required API keys and provide security recommendations."""
    issues = []
    recommendations = []
    
    # Check Telegram token
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not telegram_token:
        issues.append("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    elif len(telegram_token) < 40:
        issues.append("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)")
    
    # Check OpenAI key
    openai_key = get_openai_key()
    if not openai_key:
        issues.append("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω (AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    elif not openai_key.startswith('sk-'):
        issues.append("‚ö†Ô∏è OPENAI_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    # Security recommendations
    recommendations.extend([
        "üîê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π:",
        "‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ API –∫–ª—é—á–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ .env –≤ .gitignore",
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ",
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ API –∫–ª—é—á–∏",
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è API –∫–ª—é—á–µ–π",
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π",
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
    ])
    
    return {
        'issues': issues,
        'recommendations': recommendations,
        'telegram_configured': bool(telegram_token),
        'openai_configured': bool(openai_key)
    }

def get_security_report():
    """Get detailed security report for API keys configuration."""
    validation = validate_api_keys()
    
    report = ["üîç –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π:\n"]
    
    # Status
    if validation['telegram_configured']:
        report.append("‚úÖ Telegram Bot Token: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        report.append("‚ùå Telegram Bot Token: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if validation['openai_configured']:
        report.append("‚úÖ OpenAI API Key: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        report.append("‚ö†Ô∏è OpenAI API Key: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    # Issues
    if validation['issues']:
        report.append("\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        report.extend(validation['issues'])
    
    # Recommendations
    report.append("\n" + "\n".join(validation['recommendations']))
    
    return "\n".join(report)
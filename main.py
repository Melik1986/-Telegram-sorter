#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Render —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
"""

import logging
import os
import sys
import threading
from pathlib import Path
from flask import Flask

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from src.core.bot_minimal import DevDataSorterBot
from src.core.config_minimal import validate_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask app –¥–ª—è health check
app = Flask(__name__)

@app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Render."""
    return {'status': 'healthy', 'service': 'devdatasorter-bot'}, 200

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    return {
        'service': 'DevDataSorter Bot',
        'status': 'running',
        'version': 'render-optimized'
    }, 200

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        bot = DevDataSorterBot()
        bot.run()
    except Exception as e:
        logger.error(f"Bot error: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Render."""
    print("üöÄ DevDataSorter - Render Deployment")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = validate_config()
    
    if not config['telegram_configured']:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard")
        return
    
    logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
    
    if config['ai_available']:
        logger.info(f"‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {config['ai_provider']}")
    else:
        logger.warning("‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è Render
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ü–æ—Ä—Ç –¥–ª—è Render: {port}")
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask –¥–ª—è health checks
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()
"""
Telegram bot implementation with AI-powered content classification.
"""

import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from classifier import ContentClassifier
from storage import ResourceStorage
from utils import extract_urls, format_resource_list

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, bot_token, openai_api_key):
        """Initialize the Telegram bot with AI classifier and storage."""
        self.bot_token = bot_token
        self.classifier = ContentClassifier(openai_api_key)
        self.storage = ResourceStorage()
        self.app = Application.builder().token(bot_token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Set up command and message handlers."""
        # Command handlers
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("add", self.add_command))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(CommandHandler("categories", self.categories_command))
        self.app.add_handler(CommandHandler("list", self.list_command))
        
        # Message handler for content classification
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Classification Bot! / Welcome to AI Classification Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò.
This bot helps you sort developer resources using AI.

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã / Available commands:
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É / Show help
‚Ä¢ /add <content> - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å / Add resource
‚Ä¢ /search <query> - –ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ / Search resources
‚Ä¢ /categories - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / Show categories
‚Ä¢ /list [category] - –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ / List resources

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –µ–≥–æ!
Just send me text, links, or resource descriptions, and I'll automatically classify them!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º / Command Help:

üîπ /add <content> - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   –ü—Ä–∏–º–µ—Ä: /add https://github.com/example/repo

üîπ /search <query> - –ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
   –ü—Ä–∏–º–µ—Ä: /search Python tutorial

üîπ /categories - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üîπ /list [category] - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   –ü—Ä–∏–º–µ—Ä: /list code_examples

üì§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É, –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ / Code examples
‚Ä¢ –¢—É—Ç–æ—Ä–∏–∞–ª—ã / Tutorials  
‚Ä¢ –í–∏–¥–µ–æ / Videos
‚Ä¢ –ú–∞–∫–µ—Ç—ã / Mockups
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / Documentation
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã / Tools

üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏.
        """
        await update.message.reply_text(help_text)
    
    async def add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /add command to manually add resources."""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
                "Please specify content to add.\n"
                "–ü—Ä–∏–º–µ—Ä/Example: /add https://example.com"
            )
            return
        
        content = " ".join(context.args)
        await self._process_content(update, content, manual=True)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command to search resources."""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n"
                "Please specify search query.\n"
                "–ü—Ä–∏–º–µ—Ä/Example: /search Python"
            )
            return
        
        query = " ".join(context.args).lower()
        results = self.storage.search_resources(query)
        
        if not results:
            await update.message.reply_text(
                f"‚ùå –†–µ—Å—É—Ä—Å—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                f"No resources found for query '{query}'."
            )
            return
        
        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}' / Search results for '{query}':\n\n"
        response += format_resource_list(results)
        
        await update.message.reply_text(response)
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /categories command to show available categories."""
        categories = self.storage.get_categories_summary()
        
        if not categories:
            await update.message.reply_text(
                "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n"
                "No saved resources yet."
            )
            return
        
        response = "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / Available categories:\n\n"
        for category, count in categories.items():
            category_emoji = self._get_category_emoji(category)
            response += f"{category_emoji} {category}: {count} —Ä–µ—Å—É—Ä—Å–æ–≤/resources\n"
        
        await update.message.reply_text(response)
    
    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /list command to show resources by category."""
        category = context.args[0] if context.args else None
        
        if category:
            resources = self.storage.get_resources_by_category(category)
            if not resources:
                await update.message.reply_text(
                    f"‚ùå –†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    f"No resources found in category '{category}'."
                )
                return
            
            response = f"üìã –†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' / Resources in category '{category}':\n\n"
            response += format_resource_list(resources)
        else:
            all_resources = self.storage.get_all_resources()
            if not all_resources:
                await update.message.reply_text(
                    "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n"
                    "No saved resources yet."
                )
                return
            
            response = "üìã –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã / All resources:\n\n"
            response += format_resource_list(all_resources)
        
        await update.message.reply_text(response)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming messages for automatic classification."""
        content = update.message.text
        await self._process_content(update, content, manual=False)
    
    async def _process_content(self, update: Update, content: str, manual: bool = False):
        """Process and classify content."""
        try:
            # Show typing indicator
            await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç... / Analyzing content...")
            
            # Extract URLs if present
            urls = extract_urls(content)
            
            # Classify the content
            classification = await self.classifier.classify_content(content, urls)
            
            if not classification:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
                    "Failed to classify content."
                )
                return
            
            # Store the resource
            resource_id = self.storage.add_resource(
                content=content,
                category=classification['category'],
                subcategory=classification.get('subcategory'),
                confidence=classification.get('confidence', 0.0),
                description=classification.get('description', ''),
                urls=urls
            )
            
            # Format response
            category_emoji = self._get_category_emoji(classification['category'])
            confidence_text = f" ({classification.get('confidence', 0):.1%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)" if classification.get('confidence') else ""
            
            response = f"""
‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω! / Content successfully classified!

{category_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è / Category: {classification['category']}{confidence_text}
üìù –û–ø–∏—Å–∞–Ω–∏–µ / Description: {classification.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è / No description')}
üÜî ID: {resource_id}

{f"üîó URLs –Ω–∞–π–¥–µ–Ω—ã / URLs found: {len(urls)}" if urls else ""}
            """
            
            if classification.get('subcategory'):
                response += f"\nüìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è / Subcategory: {classification['subcategory']}"
            
            await update.message.reply_text(response.strip())
            
        except Exception as e:
            logger.error(f"Error processing content: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
                "An error occurred while processing content."
            )
    
    def _get_category_emoji(self, category: str) -> str:
        """Get emoji for category."""
        emoji_map = {
            'code_examples': 'üíª',
            'tutorials': 'üìö',
            'videos': 'üé•',
            'mockups': 'üé®',
            'documentation': 'üìñ',
            'tools': 'üîß',
            'articles': 'üì∞',
            'libraries': 'üì¶',
            'frameworks': 'üèóÔ∏è',
            'other': 'üìÑ'
        }
        return emoji_map.get(category, 'üìÑ')
    
    def run(self):
        """Start the bot."""
        logger.info("Bot is starting...")
        self.app.run_polling()

#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Render —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏.
"""

import logging
import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from src.core.bot_render import DevDataSorterBot
from src.core.config_render import validate_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Render."""
    print("üöÄ DevDataSorter - Render Deployment")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = validate_config()
    
    if not config['telegram_configured']:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard")
        return
    
    logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
    
    if config['ai_available']:
        logger.info(f"‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {config['ai_provider']}")
    else:
        logger.warning("‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è Render
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ü–æ—Ä—Ç –¥–ª—è Render: {port}")
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        bot = DevDataSorterBot()
        
        # –ó–∞–ø—É—Å–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        asyncio.run(bot.run_async())
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
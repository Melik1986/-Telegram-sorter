import asyncio
import logging
import os
import re
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from urllib.parse import urlparse

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

from .classifier import ContentClassifier
from .config import get_ai_config, TELEGRAM_BOT_TOKEN
from ..utils.storage import ResourceStorage
from ..utils.rate_limiter import RateLimiter
from ..utils.i18n import I18nManager
from ..handlers.file_handler import FileHandler
from ..handlers.message_sorter import MessageSorter
from ..handlers.command_interpreter import NaturalLanguageCommandInterpreter, CommandType

logger = logging.getLogger(__name__)

class DevDataSorterBot:
    """Enhanced bot class for DevDataSorter with improved Russian language support."""
    
    def __init__(self, token: str = None):
        self.token = token or TELEGRAM_BOT_TOKEN
        self.ai_config = get_ai_config()
        self.storage = ResourceStorage()
        self.classifier = ContentClassifier()
        self.rate_limiter = RateLimiter()
        self.i18n = I18nManager()
        self.file_handler = FileHandler()
        self.message_sorter = MessageSorter(self.classifier)
        self.command_interpreter = NaturalLanguageCommandInterpreter(self.classifier)
        
        # Enhanced Russian language patterns
        self._init_enhanced_language_patterns()
        
        # Initialize Telegram application
        self.app = Application.builder().token(self.token).build()
        
        # Add handlers
        self._setup_handlers()
    
    def _init_enhanced_language_patterns(self):
        """Initialize enhanced patterns for better Russian language understanding."""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        self.russian_question_patterns = [
            r'\b(—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–æ–µ|–∫–∞–∫–∏–µ|–∫—Ç–æ|–∫–æ–º—É|—á–µ–π|—á—å—è|—á—å—ë|—á—å–∏)\b',
            r'\b(–º–æ–∂–µ—à—å|–º–æ–∂–µ—Ç–µ|—É–º–µ–µ—à—å|—É–º–µ–µ—Ç–µ|–∑–Ω–∞–µ—à—å|–∑–Ω–∞–µ—Ç–µ)\b',
            r'\b(–ø–æ–º–æ–≥–∏|–ø–æ–º–æ–≥–∏—Ç–µ|–æ–±—ä—è—Å–Ω–∏|–æ–±—ä—è—Å–Ω–∏—Ç–µ|—Ä–∞—Å—Å–∫–∞–∂–∏|—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ|–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏—Ç–µ)\b',
            r'\b(–Ω–∞–π–¥–∏|–Ω–∞–π–¥–∏—Ç–µ|–∏—â–∏|–∏—â–∏—Ç–µ|–ø–æ–∏—â–∏|–ø–æ–∏—â–∏—Ç–µ)\b'
        ]
        
        self.russian_command_synonyms = {
            '–ø–æ–∏—Å–∫': ['–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–∏—â–∏', '–∏—Å–∫–∞—Ç—å', '–ø–æ–∏—â–∏', '–ø–æ–∏—Å–∫–∞—Ç—å', '–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∑–∞—Ç—å'],
            '—Å–æ–∑–¥–∞—Ç—å': ['—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', '—Å–¥–µ–ª–∞—Ç—å', '–ø–æ—Å—Ç—Ä–æ–π', '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å', '–æ—Ä–≥–∞–Ω–∏–∑—É–π', '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å'],
            '–ø–∞–ø–∫–∞': ['–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è', '–∫–∞—Ç–∞–ª–æ–≥', 'folder', 'dir', 'directory'],
            '–∞—Ä—Ö–∏–≤': ['–∞—Ä—Ö–∏–≤—á–∏–∫', 'backup', '–±—ç–∫–∞–ø', '—Ä–µ–∑–µ—Ä–≤', '—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è'],
            '—Å–ø–∏—Å–æ–∫': ['–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∑–∞—Ç—å', '–≤—ã–≤–µ—Å—Ç–∏', '–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å', 'list', '–ª–∏—Å—Ç–∏–Ω–≥'],
            '–ø–æ–º–æ—â—å': ['—Å–ø—Ä–∞–≤–∫–∞', 'help', '—Ö–µ–ª–ø', '–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø–æ–¥—Å–∫–∞–∑–∫–∞'],
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': ['—Å—Ç–∞—Ç–∞', 'stats', '—Å—Ç–∞—Ç—ã', '–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
            '—ç–∫—Å–ø–æ—Ä—Ç': ['–≤—ã–≥—Ä—É–∑–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'export', 'download'],
            '–∞–Ω–∞–ª–∏–∑': ['–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—Ä–∞–∑–æ–±—Ä–∞—Ç—å', '–∏–∑—É—á–∏—Ç—å', 'analyze', 'analysis'],
            '—É–¥–∞–ª–∏—Ç—å': ['—É–±—Ä–∞—Ç—å', '—Å—Ç–µ—Ä–µ—Ç—å', 'delete', 'remove', 'del']
        }
        
        self.context_enhancers = {
            '–∫–æ–¥': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'coding', 'programming', 'development'],
            '–¥–∏–∑–∞–π–Ω': ['ui', 'ux', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–º–∞–∫–µ—Ç', 'layout', 'design'],
            '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': ['docs', 'readme', '–º–∞–Ω—É–∞–ª', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'],
            '—Å—Å—ã–ª–∫–∞': ['url', 'link', '–ª–∏–Ω–∫', '–∞–¥—Ä–µ—Å', '—Å–∞–π—Ç', 'website']
        }
    
    def _setup_handlers(self):
        """Setup all bot handlers."""
        # Command handlers
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("list", self.list_command))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(CommandHandler("export", self.export_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        
        # New enhanced commands
        self.app.add_handler(CommandHandler("create_folder", self.create_folder_command))
        self.app.add_handler(CommandHandler("create_archive", self.create_archive_command))
        self.app.add_handler(CommandHandler("find_folder", self.find_folder_command))
        self.app.add_handler(CommandHandler("smart_search", self.smart_search_command))
        self.app.add_handler(CommandHandler("analyze", self.analyze_command))
        
        # Message handlers
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
        # Callback query handler
        self.app.add_handler(CallbackQueryHandler(self.handle_callback_query))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command with enhanced multilingual support."""
        welcome_text = (
            "ü§ñ **DevDataSorter Bot** / –ë–æ—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üìù **What I can do / –ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ Classify and store your content / –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "‚Ä¢ Answer questions intelligently / –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ Search through saved resources / –ò—Å–∫–∞—Ç—å –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n"
            "‚Ä¢ Export your data / –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ Understand natural language commands / –ü–æ–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ\n\n"
            "üìã **Commands / –ö–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/help` - Show help / –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ `/list [category]` - List resources / –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "‚Ä¢ `/search <query>` - Search resources / –ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "‚Ä¢ `/export` - Export data / –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/stats` - Show statistics / –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "üí° **Natural Language Examples / –ü—Ä–∏–º–µ—Ä—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:**\n"
            "‚Ä¢ \"–ù–∞–π–¥–∏ –≤—Å–µ –ø—Ä–æ Python\" / \"Find everything about Python\"\n"
            "‚Ä¢ \"–°–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤\" / \"Create a folder for projects\"\n"
            "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\" / \"Show statistics\"\n\n"
            "üí° **Just send me any content and I'll help organize it!**\n"
            "üí° **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å!**"
        )
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command with enhanced examples."""
        help_text = (
            "üÜò **Help / –°–ø—Ä–∞–≤–∫–∞**\n\n"
            "**üì§ Sending Content / –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n"
            "‚Ä¢ Text messages / –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ Images with descriptions / –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏\n"
            "‚Ä¢ Documents (PDF, DOC, etc.) / –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ URLs and links / URL –∏ —Å—Å—ã–ª–∫–∏\n\n"
            "**üîç Natural Language Search / –ü–æ–∏—Å–∫ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:**\n"
            "‚Ä¢ \"–ù–∞–π–¥–∏ –∫–æ–¥ –Ω–∞ Python\" - Find Python code\n"
            "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏\" - Show all links\n"
            "‚Ä¢ \"–ì–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ React?\" - Where is React documentation?\n\n"
            "**üìÅ Folder Management / –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏:**\n"
            "‚Ä¢ \"–°–æ–∑–¥–∞–π –ø–∞–ø–∫—É –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\" - Create web development folder\n"
            "‚Ä¢ \"–°–¥–µ–ª–∞–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤\" - Create projects archive\n\n"
            "**üìä Information / –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\" - Show statistics\n"
            "‚Ä¢ \"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ\" - Export data\n"
            "‚Ä¢ \"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç\" - Analyze content\n\n"
            "**üîç Traditional Search / –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:**\n"
            "‚Ä¢ `/search python tutorial` - Find Python tutorials\n"
            "‚Ä¢ `/search –∫–∞—Ç–µ–≥–æ—Ä–∏—è:–∫–æ–¥` - Search in specific category\n\n"
            "**üìã Listing / –ü—Ä–æ—Å–º–æ—Ç—Ä:**\n"
            "‚Ä¢ `/list` - Show all resources / –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã\n"
            "‚Ä¢ `/list code` - Show code resources / –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥\n\n"
            "**üìä Other / –î—Ä—É–≥–æ–µ:**\n"
            "‚Ä¢ `/stats` - View statistics / –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ `/export` - Download your data / –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n"
            "**ü§ñ AI Features / –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ Ask questions / –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ Get explanations / –ü–æ–ª—É—á–∞–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ Request help / –ü—Ä–æ—Å–∏—Ç–µ –ø–æ–º–æ—â—å"
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced message handler with improved Russian language understanding."""
        user_id = update.effective_user.id
        content = update.message.text
        
        # Rate limiting
        if not self.rate_limiter.is_allowed(user_id):
            await update.message.reply_text(
                "‚è∞ Too many requests. Please wait a moment.\n"
                "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
            )
            return
        
        # Enhanced natural language command interpretation
        command_intent = await self._enhanced_command_interpretation(content)
        
        if command_intent.command_type != CommandType.UNKNOWN and command_intent.confidence > 0.5:
            await self._handle_command_intent(update, context, command_intent)
            return
        
        # Enhanced question/request detection
        if await self._is_enhanced_question_or_request(content):
            await self._handle_intelligent_response(update, context, content)
        else:
            await self._process_content(update, context, content)
    
    async def _enhanced_command_interpretation(self, content: str):
        """Enhanced command interpretation with better Russian support."""
        # First try the existing command interpreter
        command_intent = await self.command_interpreter.interpret_command(content)
        
        # If confidence is low, try enhanced interpretation
        if command_intent.confidence < 0.7:
            enhanced_intent = await self._try_enhanced_interpretation(content)
            if enhanced_intent and enhanced_intent.confidence > command_intent.confidence:
                return enhanced_intent
        
        return command_intent
    
    async def _try_enhanced_interpretation(self, content: str):
        """Try enhanced interpretation using expanded patterns and AI."""
        content_lower = content.lower()
        
        # Enhanced pattern matching with synonyms
        for command, synonyms in self.russian_command_synonyms.items():
            for synonym in synonyms:
                if synonym in content_lower:
                    # Extract parameters based on command type
                    parameters = await self._extract_enhanced_parameters(content, command, synonym)
                    
                    # Determine command type
                    command_type = self._map_to_command_type(command)
                    
                    if command_type != CommandType.UNKNOWN:
                        from ..handlers.command_interpreter import CommandIntent
                        return CommandIntent(
                            command_type=command_type,
                            parameters=parameters,
                            confidence=0.8,
                            language='ru' if any(ord(c) > 127 for c in content) else 'en'
                        )
        
        # Try AI-enhanced interpretation if available
        if self.classifier.groq_client:
            return await self._ai_enhanced_interpretation(content)
        
        return None
    
    def _map_to_command_type(self, command: str) -> CommandType:
        """Map Russian command to CommandType enum."""
        mapping = {
            '–ø–æ–∏—Å–∫': CommandType.SEARCH,
            '—Å–æ–∑–¥–∞—Ç—å': CommandType.CREATE_FOLDER,
            '–ø–∞–ø–∫–∞': CommandType.CREATE_FOLDER,
            '–∞—Ä—Ö–∏–≤': CommandType.CREATE_ARCHIVE,
            '—Å–ø–∏—Å–æ–∫': CommandType.LIST,
            '–ø–æ–º–æ—â—å': CommandType.HELP,
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': CommandType.STATS,
            '—ç–∫—Å–ø–æ—Ä—Ç': CommandType.EXPORT,
            '–∞–Ω–∞–ª–∏–∑': CommandType.ANALYZE,
            '—É–¥–∞–ª–∏—Ç—å': CommandType.DELETE
        }
        return mapping.get(command, CommandType.UNKNOWN)
    
    async def _extract_enhanced_parameters(self, content: str, command: str, synonym: str) -> Dict[str, Any]:
        """Extract parameters from content using enhanced patterns with improved Russian support."""
        parameters = {}
        content_lower = content.lower()
        
        if command in ['–ø–æ–∏—Å–∫']:
            # Enhanced search query extraction
            # First try to find query after the synonym
            query_start = content_lower.find(synonym.lower())
            if query_start != -1:
                query_start += len(synonym)
                query = content[query_start:].strip()
            else:
                # Fallback to pattern matching
                search_patterns = [
                    r'(?:–Ω–∞–π–¥–∏|–Ω–∞–π—Ç–∏|–ø–æ–∏—â–∏|–ø–æ–∏—Å–∫–∞—Ç—å|–æ—Ç—ã—â–∏)\s+(.+)',
                    r'(?:–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|–æ—Ç–æ–±—Ä–∞–∑–∏)\s+(?:–º–Ω–µ\s+)?(.+)',
                    r'–≥–¥–µ\s+(?:–Ω–∞—Ö–æ–¥–∏—Ç—Å—è\s+|–µ—Å—Ç—å\s+)?(.+)',
                    r'–∏—â–∏\s+(.+)',
                    r'—Ö–æ—á—É\s+(?:–Ω–∞–π—Ç–∏|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)\s+(.+)',
                    r'—á—Ç–æ\s+(?:—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)\s+)?(?:–µ—Å—Ç—å\s+)?(?:–ø–æ\s+|–ø—Ä–æ\s+|–æ\s+)?(.+?)\??$',
                    r'–∫–∞–∫–∏–µ\s+(?:—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)\s+)?(?:–µ—Å—Ç—å\s+)?(.+?)\??$'
                ]
                
                query = None
                for pattern in search_patterns:
                    match = re.search(pattern, content, re.IGNORECASE)
                    if match:
                        query = match.group(1).strip()
                        break
            
            if query:
                # Clean up the query
                query = re.sub(r'^(–≤—Å–µ|–≤—Å—ë|–ø—Ä–æ|–æ|–æ–±|about|for|on|–º–Ω–µ|–¥–ª—è\s+–º–µ–Ω—è)\s+', '', query, flags=re.IGNORECASE)
                query = re.sub(r'[?!.,;]+$', '', query).strip()
                
                if query and len(query) > 1:
                    parameters['query'] = query
        
        elif command in ['—Å–æ–∑–¥–∞—Ç—å', '–ø–∞–ø–∫–∞', '–∞—Ä—Ö–∏–≤']:
            # Enhanced name extraction for folders/archives
            name_patterns = [
                # –î–ª—è –ø–∞–ø–æ–∫
                r'(?:—Å–æ–∑–¥–∞–π|—Å–¥–µ–ª–∞–π|–Ω–æ–≤–∞—è)\s+(?:–ø–∞–ø–∫—É|–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é|–∫–∞—Ç–∞–ª–æ–≥)\s+(?:—Å\s+–Ω–∞–∑–≤–∞–Ω–∏–µ–º\s+)?["\']?([^"\'\.]+)["\']?',
                r'(?:–ø–∞–ø–∫—É|–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é)\s+["\']?([^"\'\.]+)["\']?',
                # –î–ª—è –∞—Ä—Ö–∏–≤–æ–≤
                r'(?:—Å–æ–∑–¥–∞–π|—Å–¥–µ–ª–∞–π)\s+(?:–∞—Ä—Ö–∏–≤|–±—ç–∫–∞–ø)\s+(?:—Å\s+–Ω–∞–∑–≤–∞–Ω–∏–µ–º\s+)?["\']?([^"\'\.]+)["\']?',
                r'(?:–∞—Ä—Ö–∏–≤|–±—ç–∫–∞–ø)\s+["\']?([^"\'\.]+)["\']?',
                # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                r'(?:—Å–æ–∑–¥–∞–π|—Å–¥–µ–ª–∞–π|–ø–æ—Å—Ç—Ä–æ–π)\s+(?:–ø–∞–ø–∫—É|–∞—Ä—Ö–∏–≤|folder|archive)?\s*["\']?([^"\'\.]+)["\']?',
                r'["\']([^"\'\.]+)["\']',
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "–ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç—ã"
                r'(?:–ø–∞–ø–∫–∞|–∞—Ä—Ö–∏–≤|folder|archive)\s+([–∞-—è—ëa-z0-9\s_-]+?)(?:\s|$)',
            ]
            
            for pattern in name_patterns:
                match = re.search(pattern, content, re.IGNORECASE)
                if match:
                    name = match.group(1).strip()
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
                    name = re.sub(r'\b(—Å|–Ω–∞–∑–≤–∞–Ω–∏–µ–º|called|named)\b', '', name, flags=re.IGNORECASE).strip()
                    if name and len(name) > 1 and name.lower() not in ['–ø–∞–ø–∫—É', '–∞—Ä—Ö–∏–≤', 'folder', 'archive']:
                        parameters['name'] = name
                        break
        
        elif command == '—Å–ø–∏—Å–æ–∫':
            # Enhanced category extraction
            category_patterns = [
                r'(?:–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|—Å–ø–∏—Å–æ–∫|–æ—Ç–æ–±—Ä–∞–∑–∏)\s+(?:–≤—Å–µ|–≤—Å—ë|–º–Ω–µ)?\s*([–∞-—è—ë\w]+)(?:\s+(?:—Ñ–∞–π–ª—ã|–¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å—Å—ã–ª–∫–∏|–¥–∞–Ω–Ω—ã–µ))?',
                r'(?:–≤|–∏–∑)\s+–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\s+([–∞-—è—ë\w]+)',
                r'–∫–∞—Ç–µ–≥–æ—Ä–∏—è\s+([–∞-—è—ë\w]+)',
                r'—á—Ç–æ\s+(?:–µ—Å—Ç—å\s+)?(?:–≤|–ø–æ)\s+([–∞-—è—ë\w]+)',
                r'([–∞-—è—ë\w]+)\s+(?:—Ñ–∞–π–ª—ã|–¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å—Å—ã–ª–∫–∏|–¥–∞–Ω–Ω—ã–µ)',
                # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
                r'–∫–∞–∫–∏–µ\s+(?:—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)\s+)?(?:–µ—Å—Ç—å\s+)?([–∞-—è—ë\w]+)',
                r'—á—Ç–æ\s+(?:—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)\s+)?(?:–µ—Å—Ç—å\s+)?(?:–ø–æ\s+)?([–∞-—è—ë\w]+)'
            ]
            
            for pattern in category_patterns:
                match = re.search(pattern, content_lower)
                if match:
                    category = match.group(1).strip()
                    if category not in ['–≤—Å–µ', '–≤—Å—ë', 'all', '–º–Ω–µ', 'me', '–µ—Å—Ç—å', 'have']:
                        parameters['category'] = category
                        break
        
        elif command == '—É–¥–∞–ª–∏—Ç—å':
            # Enhanced target extraction for deletion
            target_patterns = [
                r'(?:—É–¥–∞–ª–∏|—É–±–µ—Ä–∏|—Å—Ç–µ—Ä–µ—Ç—å|–æ—á–∏—Å—Ç–∏|—Å–Ω–µ—Å–∏)\s+(?:–ø–∞–ø–∫—É\s+|—Ñ–∞–π–ª\s+|–∞—Ä—Ö–∏–≤\s+)?["\']?([^"\'\.]+)["\']?',
                r'(?:delete|remove|clear|erase)\s+(?:folder\s+|file\s+|archive\s+)?["\']?([^"\'\.]+)["\']?',
                # ID –∏–ª–∏ –∏–Ω–¥–µ–∫—Å
                r'(?:—É–¥–∞–ª–∏|—É–±–µ—Ä–∏|delete|remove)\s+(?:–Ω–æ–º–µ—Ä\s+|#)?(\d+)',
                # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                r'(?:—É–¥–∞–ª–∏|—É–±–µ—Ä–∏)\s+(?:–≤—Å–µ\s+)?(?:–∏–∑\s+)?(?:–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\s+)?([–∞-—è—ë\w]+)'
            ]
            
            for pattern in target_patterns:
                match = re.search(pattern, content, re.IGNORECASE)
                if match:
                    target = match.group(1).strip()
                    if target:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏
                        if target.isdigit():
                            parameters['target_id'] = int(target)
                        else:
                            parameters['target'] = target
                        break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self._extract_additional_parameters(content, parameters)
        
        return parameters
    
    def _extract_additional_parameters(self, content: str, parameters: Dict[str, Any]):
        """Extract additional parameters like file types, categories, etc."""
        content_lower = content.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        file_type_patterns = [
            r'\b(pdf|doc|docx|txt|md|html|css|js|py|java|cpp|c|php|rb|go|rs)\b',
            r'\b(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|–∫–∞—Ä—Ç–∏–Ω–∫–∏|—Ñ–æ—Ç–æ|–≤–∏–¥–µ–æ|–∞—É–¥–∏–æ|–¥–æ–∫—É–º–µ–Ω—Ç—ã|–∫–æ–¥|—Å—Å—ã–ª–∫–∏)\b'
        ]
        
        for pattern in file_type_patterns:
            matches = re.findall(pattern, content_lower)
            if matches:
                parameters['file_types'] = list(set(matches))
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        time_patterns = [
            r'–∑–∞\s+(–ø–æ—Å–ª–µ–¥–Ω–∏–π|–ø—Ä–æ—à–ª—ã–π)\s+(–¥–µ–Ω—å|–Ω–µ–¥–µ–ª—é|–º–µ—Å—è—Ü|–≥–æ–¥)',
            r'(—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–Ω–∞\s+—ç—Ç–æ–π\s+–Ω–µ–¥–µ–ª–µ|–≤\s+—ç—Ç–æ–º\s+–º–µ—Å—è—Ü–µ)',
            r'(today|yesterday|this\s+week|this\s+month|last\s+week)'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, content_lower)
            if match:
                parameters['time_filter'] = match.group(0)
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        limit_patterns = [
            r'(?:–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|–Ω–∞–π–¥–∏)\s+(?:–ø–µ—Ä–≤—ã–µ\s+|–ø–æ—Å–ª–µ–¥–Ω–∏–µ\s+)?(\d+)',
            r'(?:show|find)\s+(?:first\s+|last\s+)?(\d+)'
        ]
        
        for pattern in limit_patterns:
            match = re.search(pattern, content_lower)
            if match:
                parameters['limit'] = int(match.group(1))
                break
    
    async def _ai_enhanced_interpretation(self, content: str):
        """Use AI for enhanced command interpretation with improved Russian language support."""
        try:
            prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{content}"

–¢–∏–ø—ã –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã:

1. SEARCH (–ø–æ–∏—Å–∫/–Ω–∞–π—Ç–∏):
   - –†—É—Å—Å–∫–∏–π: –Ω–∞–π–¥–∏, –Ω–∞–π—Ç–∏, –ø–æ–∏—â–∏, –ø–æ–∏—Å–∫–∞—Ç—å, –ø–æ–∫–∞–∂–∏, –ø–æ–∫–∞–∑–∞—Ç—å, –≥–¥–µ, –∏—â–∏, –∏—Å–∫–∞—Ç—å, –æ—Ç—ã—â–∏
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: find, search, look for, show me, where is, locate
   - –ü—Ä–∏–º–µ—Ä—ã: "–Ω–∞–π–¥–∏ –∫–æ–¥ –Ω–∞ Python", "–ø–æ–∫–∞–∂–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏", "–≥–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è?"

2. CREATE_FOLDER (—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É):
   - –†—É—Å—Å–∫–∏–π: —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É, —Å–¥–µ–ª–∞–π –ø–∞–ø–∫—É, –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫–∞—Ç–∞–ª–æ–≥
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: create folder, make folder, new folder, directory
   - –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤", "—Å–¥–µ–ª–∞–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"

3. CREATE_ARCHIVE (—Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤):
   - –†—É—Å—Å–∫–∏–π: —Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤, —Å–¥–µ–ª–∞–π –∞—Ä—Ö–∏–≤, –±—ç–∫–∞–ø, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: create archive, make backup, archive, backup
   - –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤", "—Å–¥–µ–ª–∞–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö"

4. LIST (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫):
   - –†—É—Å—Å–∫–∏–π: —Å–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫, –æ—Ç–æ–±—Ä–∞–∑–∏, –≤—ã–≤–µ—Å—Ç–∏, –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: list, show list, display, show all, what do you have
   - –ü—Ä–∏–º–µ—Ä—ã: "–ø–æ–∫–∞–∂–∏ –≤—Å–µ", "—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å?"

5. HELP (–ø–æ–º–æ—â—å):
   - –†—É—Å—Å–∫–∏–π: –ø–æ–º–æ—â—å, –ø–æ–º–æ–≥–∏, —Å–ø—Ä–∞–≤–∫–∞, –∫–∞–∫, —á—Ç–æ —É–º–µ–µ—à—å, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: help, how to, what can you do, instructions
   - –ü—Ä–∏–º–µ—Ä—ã: "–ø–æ–º–æ–≥–∏", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å?"

6. STATS (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):
   - –†—É—Å—Å–∫–∏–π: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å—Ç–∞—Ç–∞, –¥–∞–Ω–Ω—ã–µ, —Å–∫–æ–ª—å–∫–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: statistics, stats, data, how many, count, info
   - –ü—Ä–∏–º–µ—Ä—ã: "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è —Ñ–∞–π–ª–æ–≤?"

7. EXPORT (—ç–∫—Å–ø–æ—Ä—Ç):
   - –†—É—Å—Å–∫–∏–π: —ç–∫—Å–ø–æ—Ä—Ç, –≤—ã–≥—Ä—É–∑–∏—Ç—å, —Å–∫–∞—á–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: export, download, save, extract
   - –ü—Ä–∏–º–µ—Ä—ã: "—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ", "—Å–∫–∞—á–∞–π –≤—Å–µ"

8. ANALYZE (–∞–Ω–∞–ª–∏–∑):
   - –†—É—Å—Å–∫–∏–π: –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —Ä–∞–∑–±–µ—Ä–∏, –∏–∑—É—á–∏, –ø—Ä–æ–≤–µ—Ä—å
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: analyze, analysis, examine, study, check
   - –ü—Ä–∏–º–µ—Ä—ã: "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç", "—Ä–∞–∑–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ"

9. DELETE (—É–¥–∞–ª–∏—Ç—å):
   - –†—É—Å—Å–∫–∏–π: —É–¥–∞–ª–∏, —É–±–µ—Ä–∏, —Å—Ç–µ—Ä–µ—Ç—å, —É–¥–∞–ª–∏—Ç—å, –æ—á–∏—Å—Ç–∏—Ç—å, —Å–Ω–µ—Å—Ç–∏
   - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: delete, remove, clear, erase
   - –ü—Ä–∏–º–µ—Ä—ã: "—É–¥–∞–ª–∏ –ø–∞–ø–∫—É", "—É–±–µ—Ä–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª"

10. UNKNOWN (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):
    - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–í–∞–∂–Ω–æ:
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–º—ã—Å–ª —Å–æ–æ–±—â–µ–Ω–∏—è
- –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã
- –û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (ru/en)
- –ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ –∏—Å–∫–∞—Ç—å, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ —Ç.–¥.)
- –û—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "command_type": "—Ç–∏–ø_–∫–æ–º–∞–Ω–¥—ã",
    "parameters": {{"query": "—á—Ç–æ –∏—Å–∫–∞—Ç—å", "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "target": "—Ü–µ–ª—å"}},
    "confidence": 0.0-1.0,
    "language": "ru/en",
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}}
"""
            
            response = await self.classifier._call_groq_api(prompt)
            if response:
                try:
                    # Parse JSON response
                    import json
                    result = json.loads(response)
                    
                    command_type_str = result.get('command_type', 'UNKNOWN')
                    
                    # Map string to enum
                    command_type = getattr(CommandType, command_type_str, CommandType.UNKNOWN)
                    
                    from ..handlers.command_interpreter import CommandIntent
                    return CommandIntent(
                        command_type=command_type,
                        parameters=result.get('parameters', {}),
                        confidence=result.get('confidence', 0.5),
                        language=result.get('language', 'ru')
                    )
                except json.JSONDecodeError as e:
                    logger.error(f"Failed to parse AI response as JSON: {e}")
                    logger.error(f"Response was: {response}")
        
        except Exception as e:
            logger.error(f"AI enhanced interpretation error: {e}")
        
        return None
    
    async def _is_enhanced_question_or_request(self, content: str) -> bool:
        """Enhanced detection of questions and requests with better Russian support."""
        content_lower = content.lower()
        
        # Check for question marks
        if '?' in content or 'Ôºü' in content:
            return True
        
        # Enhanced Russian question patterns
        for pattern in self.russian_question_patterns:
            if re.search(pattern, content_lower):
                return True
        
        # English question patterns
        english_patterns = [
            r'\b(what|how|where|when|why|which|who|whom|whose)\b',
            r'\b(can you|could you|would you|will you)\b',
            r'\b(help me|explain|tell me|show me)\b'
        ]
        
        for pattern in english_patterns:
            if re.search(pattern, content_lower):
                return True
        
        # Context-based detection
        question_indicators = [
            '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø–æ–º–æ–≥–∏', '–ø–æ–¥—Å–∫–∞–∂–∏', '–ø–æ–∫–∞–∂–∏',
            'explain', 'tell', 'help', 'show', 'guide', 'how to'
        ]
        
        words = content_lower.split()
        if any(indicator in words for indicator in question_indicators):
            return True
        
        # AI-based question detection if available
        if self.classifier.groq_client and len(content) > 10:
            return await self._ai_question_detection(content)
        
        return False
    
    async def _ai_question_detection(self, content: str) -> bool:
        """Use AI to detect if content is a question or request."""
        try:
            prompt = f"""
–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–º–æ—â–∏:

"{content}"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "true" –∏–ª–∏ "false".
"""
            
            response = await self.classifier._call_groq_api(prompt)
            if isinstance(response, str):
                return response.lower().strip() == 'true'
            elif isinstance(response, dict) and 'answer' in response:
                return response['answer'].lower().strip() == 'true'
        
        except Exception as e:
            logger.error(f"AI question detection error: {e}")
        
        return False
    
    async def _handle_intelligent_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content: str):
        """Handle intelligent AI responses to questions and requests."""
        try:
            # Show typing indicator
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # Determine response type
            response_type = await self._determine_response_type(content)
            
            # Show appropriate indicator based on type
            if response_type == 'search':
                status_msg = await update.message.reply_text("üîç Searching / –ü–æ–∏—Å–∫...")
            elif response_type == 'help':
                status_msg = await update.message.reply_text("üí° Thinking / –î—É–º–∞—é...")
            elif response_type == 'technical':
                status_msg = await update.message.reply_text("üîß Analyzing / –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            else:
                status_msg = await update.message.reply_text("ü§ñ Processing / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            # Check if this is a search request
            if await self._is_search_request(content):
                await self._handle_search_from_message(update, context, content)
                await status_msg.delete()
                return
            
            # Generate AI response
            ai_response = await self.classifier.generate_response(content)
            
            if ai_response:
                # Format response based on type
                formatted_response = await self._format_intelligent_response(ai_response, response_type, content)
                
                # Delete status message and send response
                await status_msg.delete()
                await update.message.reply_text(formatted_response, parse_mode=ParseMode.MARKDOWN)
            else:
                # Fallback response
                fallback_response = await self._generate_fallback_response(content, response_type)
                await status_msg.delete()
                await update.message.reply_text(fallback_response, parse_mode=ParseMode.MARKDOWN)
                
        except Exception as e:
            logger.error(f"Error in intelligent response: {e}")
            await update.message.reply_text(
                "‚ùå Sorry, I couldn't process your request right now.\n"
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
            )
    
    async def _determine_response_type(self, content: str) -> str:
        """Determine the type of response needed based on enhanced content analysis."""
        content_lower = content.lower()
        
        # Search indicators - check first as it's most specific
        if await self._is_search_request(content):
            return 'search'
        
        # Enhanced help/guidance indicators
        help_indicators = [
            # Russian help indicators
            '–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏—Ç–µ', '–∫–∞–∫', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–Ω–µ –∑–Ω–∞—é', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏',
            '–ø–æ–¥—Å–∫–∞–∂–∏', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–Ω–∞—É—á–∏', '–Ω–∞—É—á–∏—Ç–µ', '–ø–æ–∫–∞–∂–∏ –∫–∞–∫', '–ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞–∫',
            '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–≥–∞–π–¥', '—Ç—É—Ç–æ—Ä–∏–∞–ª', '–æ–±—É—á–µ–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ',
            '–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '–Ω–æ–≤–∏—á–æ–∫', '—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–ø–µ—Ä–≤—ã–µ —à–∞–≥–∏', '–æ—Å–Ω–æ–≤—ã',
            '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å',
            
            # English help indicators
            'help', 'how to', 'what should', 'explain', 'tell me', 'guide', 'tutorial',
            'teach', 'show me', 'instruction', 'manual', 'beginner', 'newbie',
            'getting started', 'first steps', 'basics', 'fundamentals',
            'dont understand', 'having trouble', 'problem', 'issue', 'stuck'
        ]
        if any(indicator in content_lower for indicator in help_indicators):
            return 'help'
        
        # Enhanced technical/programming indicators
        tech_indicators = [
            # Russian technical terms
            '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–∫—Ä–∏–ø—Ç', '–º–æ–¥—É–ª—å', '–ø–∞–∫–µ—Ç', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
            '–∫–æ–º–ø–∏–ª—è—Ü–∏—è', '–æ—Ç–ª–∞–¥–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–µ–ø–ª–æ–π', '—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', '—Å–±–æ—Ä–∫–∞',
            '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '—Å–µ—Ä–≤–µ—Ä', '–∫–ª–∏–µ–Ω—Ç', '–∞–ø–∏', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–ø—Ä–æ—Ç–æ–∫–æ–ª',
            '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞', '–º–∞—Å—Å–∏–≤', '–æ–±—ä–µ–∫—Ç', '–º–µ—Ç–æ–¥', '—Å–≤–æ–π—Å—Ç–≤–æ',
            '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º', '–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è', '–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è',
            '—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '—Å–µ–º–∞–Ω—Ç–∏–∫–∞', '–ø–∞—Ä—Å–∏–Ω–≥', '–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä', '–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä',
            
            # English technical terms
            'code', 'programming', 'algorithm', 'function', 'class', 'library', 'framework',
            'development', 'application', 'script', 'module', 'package', 'dependency',
            'compilation', 'debugging', 'testing', 'deployment', 'build', 'compile',
            'database', 'server', 'client', 'api', 'interface', 'protocol',
            'variable', 'constant', 'array', 'object', 'method', 'property',
            'inheritance', 'polymorphism', 'encapsulation', 'abstraction',
            'syntax', 'semantics', 'parsing', 'compiler', 'interpreter',
            
            # Programming languages and technologies
            'python', 'javascript', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust',
            'react', 'vue', 'angular', 'node', 'express', 'django', 'flask',
            'mysql', 'postgresql', 'mongodb', 'redis', 'elasticsearch',
            'docker', 'kubernetes', 'aws', 'azure', 'gcp', 'git', 'github',
            'html', 'css', 'sass', 'less', 'webpack', 'babel', 'typescript',
            'json', 'xml', 'yaml', 'sql', 'nosql', 'orm', 'mvc', 'rest', 'graphql'
        ]
        if any(indicator in content_lower for indicator in tech_indicators):
            return 'technical'
        
        # Organization/management indicators
        org_indicators = [
            # Russian organization terms
            '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ø–∞–ø–∫–∞', '–∫–∞—Ç–∞–ª–æ–≥', '–∞—Ä—Ö–∏–≤', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞', '–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ',
            '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            
            # English organization terms
            'organization', 'structure', 'folder', 'directory', 'archive', 'sorting',
            'category', 'grouping', 'classification', 'ordering', 'arrangement',
            'management', 'planning', 'systematization', 'organize'
        ]
        if any(indicator in content_lower for indicator in org_indicators):
            return 'organization'
        
        # Default to general
        return 'general'
    
    async def _format_intelligent_response(self, ai_response: str, response_type: str, original_content: str) -> str:
        """Format AI response based on response type and content with enhanced Russian support."""
        # Choose appropriate emoji and title based on type
        type_config = {
            'search': {'emoji': 'üîç', 'title': '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ / Search Result'},
            'help': {'emoji': 'üí°', 'title': '–°–ø—Ä–∞–≤–∫–∞ / Help'},
            'technical': {'emoji': 'üîß', 'title': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / Technical Info'},
            'organization': {'emoji': 'üìÅ', 'title': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö / Data Organization'},
            'general': {'emoji': 'ü§ñ', 'title': 'AI –û—Ç–≤–µ—Ç / AI Response'}
        }
        
        config = type_config.get(response_type, type_config['general'])
        
        # Format the main response with better structure
        formatted_response = f"{config['emoji']} **{config['title']}:**\n\n{ai_response}\n\n"
        
        # Add contextual footer based on response type
        if response_type == 'technical':
            formatted_response += "üíæ *–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*\n"
            formatted_response += "üíæ *Want to save this code/info? Send it as a separate message*\n\n"
            formatted_response += "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /list, /search, /help*"
        elif response_type == 'help':
            formatted_response += "üìö *–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å*\n"
            formatted_response += "üìö *Need more help? Ask a follow-up question*\n\n"
            formatted_response += "üí° *–ö–æ–º–∞–Ω–¥—ã: /help, /list, /search <–∑–∞–ø—Ä–æ—Å>*"
        elif response_type == 'organization':
            formatted_response += "üìÅ *–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∏–ª–∏ –∞—Ä—Ö–∏–≤? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è*\n"
            formatted_response += "üìÅ *Want to create folder or archive? Use creation commands*\n\n"
            formatted_response += "üìÇ *–ö–æ–º–∞–Ω–¥—ã: /list, —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É <–Ω–∞–∑–≤–∞–Ω–∏–µ>, —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ <–Ω–∞–∑–≤–∞–Ω–∏–µ>*"
        elif response_type == 'search':
            formatted_response += "üîç *–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <–≤–∞—à –∑–∞–ø—Ä–æ—Å>*\n"
            formatted_response += "üîç *For more precise search use: /search <your query>*\n\n"
            formatted_response += "üìã *–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ: /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤*"
        else:
            formatted_response += "üí° *–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑*\n"
            formatted_response += "üí° *If you wanted to save this content, send it again*\n\n"
            formatted_response += "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /list, /search*"
        
        return formatted_response
    
    async def _generate_fallback_response(self, content: str, response_type: str) -> str:
        """Generate fallback response when AI is unavailable."""
        fallback_responses = {
            'search': (
                "üîç **Search functionality temporarily unavailable**\n\n"
                "Try using `/search <your query>` command instead.\n\n"
                "üîç **–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/search <–≤–∞—à –∑–∞–ø—Ä–æ—Å>`."
            ),
            'help': (
                "üí° **Help system temporarily unavailable**\n\n"
                "Please check `/help` command for basic information.\n\n"
                "üí° **–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/help` –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            ),
            'technical': (
                "üîß **Technical analysis temporarily unavailable**\n\n"
                "You can still save your content by sending it again.\n\n"
                "üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –µ—â–µ —Ä–∞–∑."
            ),
            'general': (
                "ü§ñ **AI response temporarily unavailable**\n\n"
                "I can still help you organize and save content!\n\n"
                "ü§ñ **–ò–ò –æ—Ç–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–Ø –≤—Å–µ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç!"
            )
        }
        
        return fallback_responses.get(response_type, fallback_responses['general'])
    
    async def _handle_command_intent(self, update: Update, context: ContextTypes.DEFAULT_TYPE, command_intent):
        """Handle recognized command intents with enhanced Russian support."""
        try:
            command_type = command_intent.command_type
            parameters = command_intent.parameters
            language = command_intent.language
            
            # Show processing message
            if language == 'ru':
                processing_msg = await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...")
            else:
                processing_msg = await update.message.reply_text("‚öôÔ∏è Processing command...")
            
            # Execute command based on type
            if command_type == CommandType.SEARCH:
                await self._execute_search_command(update, context, parameters, language)
            elif command_type == CommandType.CREATE_FOLDER:
                await self._execute_create_folder_command(update, context, parameters, language)
            elif command_type == CommandType.CREATE_ARCHIVE:
                await self._execute_create_archive_command(update, context, parameters, language)
            elif command_type == CommandType.LIST:
                await self._execute_list_command(update, context, parameters, language)
            elif command_type == CommandType.HELP:
                await self._execute_help_command(update, context, parameters, language)
            elif command_type == CommandType.STATS:
                await self._execute_stats_command(update, context, parameters, language)
            elif command_type == CommandType.EXPORT:
                await self._execute_export_command(update, context, parameters, language)
            elif command_type == CommandType.ANALYZE:
                await self._execute_analyze_command(update, context, parameters, language)
            elif command_type == CommandType.DELETE:
                await self._execute_delete_command(update, context, parameters, language)
            else:
                # Unknown command
                if language == 'ru':
                    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                else:
                    await update.message.reply_text("‚ùå Unknown command. Try /help for available commands.")
            
            # Delete processing message
            await processing_msg.delete()
            
        except Exception as e:
            logger.error(f"Error handling command intent: {e}")
            if language == 'ru':
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
            else:
                await update.message.reply_text("‚ùå Error executing command.")
    
    async def _execute_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute search command with enhanced parameters."""
        query = parameters.get('query', '')
        if not query:
            if language == 'ru':
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –≤—Å–µ —Ñ–æ—Ç–æ'")
            else:
                await update.message.reply_text("‚ùå Please specify what to search for. Example: 'find all photos'")
            return
        
        # Perform search using existing search functionality
        await self._handle_search_from_message(update, context, query)
    
    async def _execute_create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute create folder command."""
        folder_name = parameters.get('name', '')
        if not folder_name:
            if language == 'ru':
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –î–æ–∫—É–º–µ–Ω—Ç—ã'")
            else:
                await update.message.reply_text("‚ùå Please specify folder name. Example: 'create folder Documents'")
            return
        
        try:
            # Create folder using storage
            folder_path = await self.storage.create_folder(folder_name)
            if language == 'ru':
                await update.message.reply_text(f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nüìÅ –ü—É—Ç—å: {folder_path}")
            else:
                await update.message.reply_text(f"‚úÖ Folder '{folder_name}' created successfully!\nüìÅ Path: {folder_path}")
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error creating folder: {str(e)}")
    
    async def _execute_create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute create archive command."""
        archive_name = parameters.get('name', '')
        if not archive_name:
            if language == 'ru':
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤ –ë—ç–∫–∞–ø'")
            else:
                await update.message.reply_text("‚ùå Please specify archive name. Example: 'create archive Backup'")
            return
        
        try:
            # Create archive using storage
            archive_path = await self.storage.create_archive(archive_name)
            if language == 'ru':
                await update.message.reply_text(f"‚úÖ –ê—Ä—Ö–∏–≤ '{archive_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüì¶ –ü—É—Ç—å: {archive_path}")
            else:
                await update.message.reply_text(f"‚úÖ Archive '{archive_name}' created successfully!\nüì¶ Path: {archive_path}")
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error creating archive: {str(e)}")
    
    async def _execute_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute list command."""
        category = parameters.get('category', 'all')
        
        try:
            # Get list of items from storage
            items = await self.storage.list_items(category)
            
            if not items:
                if language == 'ru':
                    await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                else:
                    await update.message.reply_text("üìÇ List is empty or category not found.")
                return
            
            # Format list
            if language == 'ru':
                header = f"üìã **–°–ø–∏—Å–æ–∫ ({category}):**\n\n"
            else:
                header = f"üìã **List ({category}):**\n\n"
            
            items_text = "\n".join([f"‚Ä¢ {item}" for item in items[:20]])  # Limit to 20 items
            
            if len(items) > 20:
                if language == 'ru':
                    footer = f"\n\n... –∏ –µ—â–µ {len(items) - 20} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                else:
                    footer = f"\n\n... and {len(items) - 20} more items"
            else:
                footer = ""
            
            await update.message.reply_text(f"{header}{items_text}{footer}", parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error listing items: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error getting list: {str(e)}")
    
    async def _execute_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute help command."""
        # Use existing help command
        await self.help_command(update, context)
    
    async def _execute_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute stats command."""
        try:
            # Get statistics from storage
            stats = await self.storage.get_statistics()
            
            if language == 'ru':
                stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üìÅ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {stats.get('folders', 0)}
üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats.get('files', 0)}
üì¶ –ê—Ä—Ö–∏–≤–æ–≤: {stats.get('archives', 0)}
üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size', '0 MB')}
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"""
            else:
                stats_text = f"""üìä **Statistics:**

üìÅ Total folders: {stats.get('folders', 0)}
üìÑ Total files: {stats.get('files', 0)}
üì¶ Archives: {stats.get('archives', 0)}
üíæ Total size: {stats.get('total_size', '0 MB')}
üïí Last update: {stats.get('last_update', 'Unknown')}"""
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error getting statistics: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error getting statistics: {str(e)}")
    
    async def _execute_export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute export command."""
        try:
            # Export data using storage
            export_path = await self.storage.export_data()
            
            if language == 'ru':
                await update.message.reply_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\nüì§ –§–∞–π–ª: {export_path}")
            else:
                await update.message.reply_text(f"‚úÖ Data exported successfully!\nüì§ File: {export_path}")
                
        except Exception as e:
            logger.error(f"Error exporting data: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error exporting data: {str(e)}")
    
    async def _execute_analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute analyze command."""
        try:
            # Perform analysis using classifier
            analysis = await self.classifier.analyze_content_distribution()
            
            if language == 'ru':
                analysis_text = f"""üîç **–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**

{analysis}"""
            else:
                analysis_text = f"""üîç **Content Analysis:**

{analysis}"""
            
            await update.message.reply_text(analysis_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error analyzing content: {e}")
            if language == 'ru':
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            else:
                await update.message.reply_text(f"‚ùå Error analyzing content: {str(e)}")
    
    async def _execute_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parameters: Dict[str, Any], language: str):
        """Execute delete command with confirmation."""
        target = parameters.get('target', '')
        if not target:
            if language == 'ru':
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '—É–¥–∞–ª–∏ –ø–∞–ø–∫—É –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã'")
            else:
                await update.message.reply_text("‚ùå Please specify what to delete. Example: 'delete folder Old files'")
            return
        
        # Create confirmation keyboard
        if language == 'ru':
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{target}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")]
            ]
            confirmation_text = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: `{target}`?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        else:
            keyboard = [
                [InlineKeyboardButton("‚úÖ Yes, delete", callback_data=f"delete_confirm_{target}")],
                [InlineKeyboardButton("‚ùå Cancel", callback_data="delete_cancel")]
            ]
            confirmation_text = f"‚ö†Ô∏è **Delete Confirmation**\n\nAre you sure you want to delete: `{target}`?\n\n‚ö†Ô∏è This action cannot be undone!"
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(confirmation_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _process_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content: str):
        """Process and classify content for storage."""
        try:
            # Preprocess content
            processed_content = await self._preprocess_content(content)
            
            # Extract URLs
            urls = self._extract_urls(processed_content)
            
            # Classify content with enhanced logic
            classification = await self.classifier.classify_content(processed_content)
            
            if not classification:
                # Enhanced fallback classification
                classification = await self._enhanced_fallback_classification(processed_content)
            
            if classification:
                # Prepare additional data
                additional_data = {
                    'urls': urls,
                    'timestamp': datetime.now().isoformat(),
                    'user_id': update.effective_user.id,
                    'message_id': update.message.message_id
                }
                
                # Add resource to storage
                resource_id = self.storage.add_resource(
                    content=processed_content,
                    category=classification['category'],
                    user_id=update.effective_user.id,
                    username=update.effective_user.username,
                    description=classification['description'],
                    urls=urls
                )
                
                # Format success message
                success_message = (
                    f"‚úÖ **Content classified and saved!**\n\n"
                    f"üìÇ **Category:** {classification['category']}\n"
                    f"üìù **Description:** {classification['description']}\n"
                    f"üÜî **ID:** {resource_id}\n"
                )
                
                if urls:
                    success_message += f"üîó **URLs found:** {len(urls)}\n"
                
                success_message += (
                    f"\n‚úÖ **–ö–æ–Ω—Ç–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n"
                    f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {classification['category']}\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {classification['description']}"
                )
                
                await update.message.reply_text(success_message, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    "‚ùå Unable to classify content. Please try rephrasing or adding more context.\n"
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
                )
                
        except Exception as e:
            logger.error(f"Error processing content: {e}")
            await update.message.reply_text(
                "‚ùå Error processing content. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def _preprocess_content(self, content: str) -> str:
        """Preprocess content before classification."""
        # Remove extra whitespace
        content = ' '.join(content.split())
        
        # Add URL context if URLs are present
        urls = self._extract_urls(content)
        if urls:
            url_context = f"\n\nURLs: {', '.join(urls)}"
            content += url_context
        
        # Detect and add technical content context
        if self._is_technical_content(content):
            content = f"[TECHNICAL CONTENT] {content}"
        
        return content
    
    def _is_technical_content(self, content: str) -> bool:
        """Detect if content is technical/programming related."""
        technical_indicators = [
            'function', 'class', 'import', 'export', 'const', 'let', 'var',
            'def', 'return', 'if', 'else', 'for', 'while', 'try', 'catch',
            'async', 'await', 'promise', 'callback', 'api', 'endpoint',
            'database', 'sql', 'query', 'select', 'insert', 'update',
            'git', 'commit', 'push', 'pull', 'merge', 'branch',
            'docker', 'kubernetes', 'deployment', 'server', 'client'
        ]
        
        content_lower = content.lower()
        return any(indicator in content_lower for indicator in technical_indicators)
    
    async def _enhanced_fallback_classification(self, content: str) -> Optional[Dict[str, Any]]:
        """Enhanced fallback classification with AI assistance."""
        try:
            # Try AI-assisted classification
            ai_classification = await self.classifier.classify_with_ai(content)
            if ai_classification:
                return ai_classification
        except Exception as e:
            logger.warning(f"AI classification failed: {e}")
        
        # Fallback to pattern-based classification
        return self._pattern_based_classification(content)
    
    def _pattern_based_classification(self, content: str) -> Optional[Dict[str, Any]]:
        """Pattern-based classification as final fallback."""
        content_lower = content.lower()
        
        # Define patterns for different categories
        patterns = {
            'code': ['function', 'class', 'import', 'def', 'return', 'var', 'const', 'let'],
            'documentation': ['readme', 'docs', 'documentation', 'guide', 'tutorial', 'how to'],
            'link': ['http', 'https', 'www.', '.com', '.org', '.net'],
            'note': ['note', 'remember', 'important', 'todo', 'task'],
            'question': ['?', 'how', 'what', 'why', 'when', 'where']
        }
        
        # Score each category
        scores = {}
        for category, keywords in patterns.items():
            score = sum(1 for keyword in keywords if keyword in content_lower)
            if score > 0:
                scores[category] = score
        
        if scores:
            # Get category with highest score
            best_category = max(scores, key=scores.get)
            return {
                'category': best_category,
                'description': f"Auto-classified as {best_category} based on content patterns",
                'confidence': min(scores[best_category] / len(patterns[best_category]), 1.0)
            }
        
        return None
    
    def _extract_urls(self, text: str) -> List[str]:
        """Extract URLs from text."""
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        return re.findall(url_pattern, text)
    
    async def _is_search_request(self, content: str) -> bool:
        """Enhanced determination if content is a search request with better Russian support."""
        content_lower = content.lower()
        
        # Extended search keywords with more Russian variants
        search_keywords = [
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–∏—Å–∫–∞—Ç—å', '–ø–æ–∏—â–∏', '–ø–æ–∏—Å–∫–∞—Ç—å',
            '–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∑–∞—Ç—å', '–æ—Ç–æ–±—Ä–∞–∑–∏', '–æ—Ç—ã—â–∏', '–æ—Ç—ã—Å–∫–∞—Ç—å',
            '–≥–¥–µ', '–∫–∞–∫–∏–µ', '—á—Ç–æ', '–µ—Å—Ç—å –ª–∏', '–∏–º–µ–µ—Ç—Å—è –ª–∏',
            '—Ö–æ—á—É –Ω–∞–π—Ç–∏', '—Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏',
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'find', 'search', 'look', 'show', 'get', 'retrieve', 'fetch',
            'where', 'what', 'which', 'is there', 'do you have', 'any'
        ]
        
        # Enhanced search patterns
        search_patterns = [
            # –ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
            r'\b(–Ω–∞–π–¥–∏|–Ω–∞–π—Ç–∏|–ø–æ–∏—â–∏|–ø–æ–∏—Å–∫–∞—Ç—å|–æ—Ç—ã—â–∏)\s+',
            r'\b(find|search|look\s+for|locate)\s+',
            
            # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
            r'\b(–≥–¥–µ|where)\s+.*\??',
            r'\b(–µ—Å—Ç—å\s+–ª–∏|–∏–º–µ–µ—Ç—Å—è\s+–ª–∏|is\s+there|do\s+you\s+have)\s+',
            r'\b(–∫–∞–∫–∏–µ|what|which)\s+.*\??',
            r'\b(—á—Ç–æ\s+—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)|what\s+do\s+you\s+have)\s+.*\??',
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            r'\b(–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|–æ—Ç–æ–±—Ä–∞–∑–∏|show\s+me|display)\s+',
            
            # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
            r'\b(—Ö–æ—á—É\s+(?:–Ω–∞–π—Ç–∏|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å)|want\s+to\s+(?:find|see))\s+',
            r'\b(–Ω—É–∂–Ω–æ\s+(?:–Ω–∞–π—Ç–∏|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)|need\s+to\s+(?:find|see))\s+',
            
            # –í–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–ª–∏—á–∏–∏
            r'\b(—É\s+(?:—Ç–µ–±—è|–º–µ–Ω—è)\s+–µ—Å—Ç—å)\s+.*\??',
            r'\b(do\s+you\s+have\s+any)\s+.*\??'
        ]
        
        # Check for direct search keywords
        words = content_lower.split()
        if any(keyword in content_lower for keyword in search_keywords):
            return True
        
        # Check for search patterns
        for pattern in search_patterns:
            if re.search(pattern, content_lower):
                return True
        
        # Check for question marks with potential search context
        if ('?' in content or 'Ôºü' in content):
            search_context_words = [
                '—Ñ–∞–π–ª', '–¥–æ–∫—É–º–µ–Ω—Ç', '–∫–æ–¥', '—Å—Å—ã–ª–∫–∞', '–ø—Ä–æ–µ–∫—Ç', '–¥–∞–Ω–Ω—ã–µ',
                'file', 'document', 'code', 'link', 'project', 'data',
                'python', 'javascript', 'html', 'css', 'java', 'php'
            ]
            if any(word in content_lower for word in search_context_words):
                return True
        
        return False
    
    async def _handle_search_from_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content: str):
        """Handle search request from a message."""
        # Extract search terms
        search_terms = self._extract_search_terms(content)
        
        if search_terms:
            # Perform search
            results = self.storage.search_resources(' '.join(search_terms))
            
            if results:
                response = f"üîç **Search Results for '{' '.join(search_terms)}':**\n\n"
                
                for i, result in enumerate(results[:5], 1):
                    response += (
                        f"{i}. **{result['category']}** - {result['description'][:100]}...\n"
                        f"   üÜî ID: {result['id']}\n\n"
                    )
                
                if len(results) > 5:
                    response += f"... and {len(results) - 5} more results\n\n"
                
                response += "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n"
                response += f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No results found for '{' '.join(search_terms)}'.\n"
                    f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{' '.join(search_terms)}'."
                )
        else:
            await update.message.reply_text(
                "‚ùå Couldn't understand what to search for. Please clarify.\n"
                "‚ùå –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            )
    
    def _extract_search_terms(self, content: str) -> List[str]:
        """Extract search terms from content with enhanced Russian support."""
        import re
        
        # Extended stop words for Russian and English
        stop_words = {
            # Russian search words
            '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–∏—Å–∫–∞—Ç—å', '–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∑–∞—Ç—å',
            '–Ω–∞–π–¥–∏—Ç–µ', '–ø–æ–∏—â–∏', '–ø–æ–∏—â–∏—Ç–µ', '–æ—Ç—ã—â–∏', '–æ—Ç—ã—â–∏—Ç–µ', '—Ä–∞–∑—ã—â–∏',
            '–≤—ã–≤–µ–¥–∏', '–≤—ã–≤–µ–¥–∏—Ç–µ', '–¥–∞–π', '–¥–∞–π—Ç–µ', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ',
            '—Ö–æ—á—É', '—Ö–æ—Ç–µ–ª', '—Ö–æ—Ç–µ–ª–∞', '–Ω—É–∂–Ω–æ', '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '—Ç—Ä–µ–±—É–µ—Ç—Å—è',
            '–º–æ–∂–µ—à—å', '–º–æ–∂–µ—Ç–µ', '—Å–º–æ–∂–µ—à—å', '—Å–º–æ–∂–µ—Ç–µ', '–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ–≥–∏—Ç–µ',
            
            # English search words
            'find', 'search', 'look', 'show', 'get', 'retrieve', 'fetch',
            'display', 'list', 'give', 'provide', 'want', 'need', 'help',
            'can', 'could', 'would', 'please', 'tell', 'show',
            
            # Question words
            '–≥–¥–µ', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∏–µ',
            'where', 'what', 'how', 'when', 'why', 'which', 'who', 'whom',
            
            # Common words
            '–µ—Å—Ç—å', '–ª–∏', 'is', 'there', 'do', 'you', 'have', 'are', 'was', 'were',
            '–º–Ω–µ', 'me', '–¥–ª—è', 'for', '–ø–æ', 'about', '–ø—Ä–æ', '–æ', '–Ω–∞', '–≤', '—Å',
            'the', 'a', 'an', 'and', 'or', 'but', 'if', 'then', 'this', 'that',
            '—É', '–∫', '–æ—Ç', '–¥–æ', '–∏–∑', '–∑–∞', '–ø–æ–¥', '–Ω–∞–¥', '–ø—Ä–∏', '–±–µ–∑',
            '–∏–ª–∏', '–∏', '–Ω–æ', '–µ—Å–ª–∏', '—Ç–æ', '—ç—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–æ', '—ç—Ç–∏'
        }
        
        # Clean content - remove punctuation except for file extensions
        content_clean = re.sub(r'[^\w\s\.\-_]', ' ', content.lower())
        
        # Split into words
        words = content_clean.split()
        
        # Filter words
        search_terms = []
        for word in words:
            # Skip stop words
            if word in stop_words:
                continue
            
            # Skip very short words (but keep file extensions)
            if len(word) < 2:
                continue
            
            # Keep meaningful words
            if len(word) >= 2:
                # Special handling for file extensions and technical terms
                if ('.' in word and len(word) > 2) or len(word) >= 3:
                    search_terms.append(word)
        
        # Remove duplicates while preserving order
        seen = set()
        unique_terms = []
        for term in search_terms:
            if term not in seen:
                seen.add(term)
                unique_terms.append(term)
        
        return unique_terms
    
    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /list command."""
        try:
            # Get category filter if provided
            category_filter = None
            if context.args:
                category_filter = ' '.join(context.args).lower()
            
            # Get resources
            if category_filter:
                resources = self.storage.get_resources_by_category(category_filter)
            else:
                resources = self.storage.get_all_resources()
            
            if resources:
                if category_filter:
                    response = f"üìÇ **Resources in category '{category_filter}':**\n\n"
                else:
                    response = "üìÇ **All saved resources:**\n\n"
                
                for i, resource in enumerate(resources[:10], 1):
                    response += (
                        f"{i}. **{resource['category']}** - {resource['description'][:80]}...\n"
                        f"   üÜî ID: {resource['id']} | üìÖ {resource['created_at'][:10]}\n\n"
                    )
                
                if len(resources) > 10:
                    response += f"... and {len(resources) - 10} more resources\n\n"
                
                response += f"üìä Total: {len(resources)} resources"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                if category_filter:
                    await update.message.reply_text(
                        f"üìÇ No resources in category '{category_filter}'.\n"
                        f"üìÇ –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_filter}'."
                    )
                else:
                    await update.message.reply_text(
                        "üìÇ No saved resources yet.\n"
                        "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."
                    )
                    
        except Exception as e:
            logger.error(f"Error in list command: {e}")
            await update.message.reply_text(
                "‚ùå Error retrieving resources.\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."
            )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command."""
        if not context.args:
            await update.message.reply_text(
                "üîç **Usage:** `/search <query>`\n"
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/search python tutorial`\n"
                "‚Ä¢ `/search –∫–∞—Ç–µ–≥–æ—Ä–∏—è:–∫–æ–¥`"
            )
            return
        
        query = ' '.join(context.args)
        
        try:
            results = self.storage.search_resources(query)
            
            if results:
                response = f"üîç **Search Results for '{query}':**\n\n"
                
                for i, result in enumerate(results[:10], 1):
                    response += (
                        f"{i}. **{result['category']}** - {result['description'][:100]}...\n"
                        f"   üÜî ID: {result['id']} | üìÖ {result['created_at'][:10]}\n\n"
                    )
                
                if len(results) > 10:
                    response += f"... and {len(results) - 10} more results\n\n"
                
                response += f"üìä Found {len(results)} results"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No results found for '{query}'.\n"
                    f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'."
                )
                
        except Exception as e:
            logger.error(f"Error in search command: {e}")
            await update.message.reply_text(
                "‚ùå Search error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command."""
        try:
            stats = self.storage.get_statistics()
            
            response = (
                "üìä **Statistics / –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
                f"üìÇ **Total resources / –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤:** {stats.get('total_resources', 0)}\n"
                f"üè∑Ô∏è **Categories / –ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {stats.get('total_categories', 0)}\n"
                f"üìÖ **This week / –ó–∞ –Ω–µ–¥–µ–ª—é:** {stats.get('resources_this_week', 0)}\n"
                f"üìà **This month / –ó–∞ –º–µ—Å—è—Ü:** {stats.get('resources_this_month', 0)}\n\n"
            )
            
            # Top categories
            if 'top_categories' in stats:
                response += "üîù **Top categories / –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in stats['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error in stats command: {e}")
            await update.message.reply_text(
                "‚ùå Error retrieving statistics.\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            )
    
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /export command."""
        try:
            # Get all resources
            all_resources = self.storage.get_all_resources()
            
            if not all_resources:
                await update.message.reply_text(
                    "üìÇ No data to export.\n"
                    "üìÇ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
                )
                return
            
            # Create export data
            export_data = {
                'export_date': datetime.now().isoformat(),
                'total_resources': len(all_resources),
                'resources': all_resources
            }
            
            # Convert to JSON
            import json
            json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
            
            # Create file
            filename = f"devdatasorter_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # Send as document
            from io import BytesIO
            file_buffer = BytesIO(json_data.encode('utf-8'))
            file_buffer.name = filename
            
            # Get categories for summary
            categories = set(resource['category'] for resource in all_resources)
            
            await update.message.reply_document(
                document=file_buffer,
                caption=f"üì§ Data export / –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\nüìä Resources: {len(all_resources)}\nüìÇ Categories: {len(categories)}"
            )
            
        except Exception as e:
            logger.error(f"Error in export command: {e}")
            await update.message.reply_text(
                "‚ùå Export error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo messages."""
        try:
            # Get photo and caption
            photo = update.message.photo[-1]  # Get highest resolution
            caption = update.message.caption or "Image without description"
            
            # Download photo
            file = await context.bot.get_file(photo.file_id)
            file_path = f"temp_image_{photo.file_id}.jpg"
            await file.download_to_drive(file_path)
            
            try:
                # Process image with file handler
                image_analysis = await self.file_handler.process_image(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nImage analysis: {image_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process image / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle document messages."""
        try:
            document = update.message.document
            caption = update.message.caption or "Document without description"
            
            # Check file size (limit to 20MB)
            if document.file_size > 20 * 1024 * 1024:
                await update.message.reply_text(
                    "‚ùå File too large (max 20MB) / –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 20–ú–ë)"
                )
                return
            
            # Download document
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_doc_{document.file_id}_{document.file_name}"
            await file.download_to_drive(file_path)
            
            try:
                # Process document with file handler
                doc_analysis = await self.file_handler.process_document(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nDocument: {document.file_name}\nSize: {document.file_size} bytes\nAnalysis: {doc_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling document: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process document / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        # Handle different callback types
        if query.data.startswith('view_'):
            resource_id = query.data.split('_')[1]
            await self._show_resource_details(query, resource_id)
        elif query.data.startswith('delete_'):
            resource_id = query.data.split('_')[1]
            await self._delete_resource(query, resource_id)
    
    async def _show_resource_details(self, query, resource_id: str):
        """Show detailed information about a resource."""
        try:
            resource = self.storage.get_resource(resource_id)
            if resource:
                response = (
                    f"üìÑ **Resource Details:**\n\n"
                    f"üÜî **ID:** {resource['id']}\n"
                    f"üìÇ **Category:** {resource['category']}\n"
                    f"üìù **Description:** {resource['description']}\n"
                    f"üìÖ **Created:** {resource['created_at']}\n\n"
                    f"üìÑ **Content:**\n{resource['content'][:500]}..."
                )
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.edit_message_text("‚ùå Resource not found")
                
        except Exception as e:
            logger.error(f"Error showing resource details: {e}")
            await query.edit_message_text("‚ùå Error retrieving resource")
    
    async def _delete_resource(self, query, resource_id: str):
        """Delete a resource."""
        try:
            success = self.storage.delete_resource(resource_id)
            if success:
                await query.edit_message_text("‚úÖ Resource deleted successfully")
            else:
                await query.edit_message_text("‚ùå Failed to delete resource")
                
        except Exception as e:
            logger.error(f"Error deleting resource: {e}")
            await query.edit_message_text("‚ùå Error deleting resource")
    
    async def _smart_select_resources_for_archive(self, archive_name: str) -> list:
        """Smart selection of resources for archive based on name."""
        try:
            # Extract keywords from archive name
            keywords = archive_name.lower().replace('_', ' ').split()
            
            # Search for relevant resources
            all_resources = self.storage.get_all_resources()
            selected = []
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Score based on keyword matches
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 3
                    if keyword in desc_lower:
                        score += 2
                    if keyword in category_lower:
                        score += 4
                
                # Include if score is high enough
                if score >= 2:
                    selected.append(resource['id'])
            
            # Limit to 20 most recent if too many
            if len(selected) > 20:
                selected = selected[-20:]
            
            return selected
            
        except Exception as e:
            logger.error(f"Error in smart resource selection: {e}")
            return []
    
    async def _enhance_search_query(self, query: str) -> dict:
        """Use AI to enhance and understand search query."""
        try:
            # Create enhanced prompt for query understanding
            prompt = f"""
Analyze this search query and extract key information:
Query: "{query}"

Provide a JSON response with:
{{
    "keywords": ["list", "of", "key", "terms"],
    "categories": ["relevant", "categories"],
    "technologies": ["mentioned", "technologies"],
    "intent": "what user is looking for",
    "language": "detected language (en/ru)",
    "filters": {{
        "file_types": ["if", "specific", "types"],
        "difficulty": "beginner/intermediate/advanced or null",
        "recency": "recent/old or null"
    }}
}}

Focus on web development, design, programming topics.
"""
            
            # Try to get AI enhancement
            if self.classifier.groq_client:
                response = await self.classifier._call_groq_api(prompt)
                if response and 'keywords' in response:
                    return response
            
            # Fallback to simple keyword extraction
            return {
                "keywords": query.lower().split(),
                "categories": [],
                "technologies": self._extract_technologies_from_text(query),
                "intent": "search",
                "language": "ru" if any(ord(c) > 127 for c in query) else "en",
                "filters": {}
            }
            
        except Exception as e:
            logger.error(f"Error enhancing search query: {e}")
            return {"keywords": query.lower().split(), "categories": [], "technologies": [], "intent": "search", "language": "en", "filters": {}}
    
    async def _perform_smart_search(self, enhanced_query: dict) -> list:
        """Perform enhanced search using AI-processed query."""
        try:
            all_resources = self.storage.get_all_resources()
            scored_results = []
            
            keywords = enhanced_query.get('keywords', [])
            categories = enhanced_query.get('categories', [])
            technologies = enhanced_query.get('technologies', [])
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Keyword matching
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 2
                    if keyword in desc_lower:
                        score += 3
                    if keyword in category_lower:
                        score += 4
                
                # Category matching
                for category in categories:
                    if category.lower() in category_lower:
                        score += 5
                
                # Technology matching
                for tech in technologies:
                    if tech.lower() in content_lower or tech.lower() in desc_lower:
                        score += 3
                
                # URL bonus for web development content
                if any(url_indicator in content_lower for url_indicator in ['http', 'www', '.com', '.org', 'github']):
                    score += 1
                
                if score > 0:
                    # Calculate relevance score (0-10)
                    relevance = min(10, score)
                    
                    result = resource.copy()
                    result['relevance_score'] = relevance
                    scored_results.append(result)
            
            # Sort by relevance score
            scored_results.sort(key=lambda x: x['relevance_score'], reverse=True)
            
            return scored_results
            
        except Exception as e:
            logger.error(f"Error in smart search: {e}")
            return []
    
    async def _perform_content_analysis(self) -> dict:
        """Perform comprehensive analysis of stored content."""
        try:
            all_resources = self.storage.get_all_resources()
            folders = self.storage.get_all_folders()
            archives = self.storage.get_all_archives()
            
            # Basic statistics
            analysis = {
                'total_resources': len(all_resources),
                'total_categories': len(set(r['category'] for r in all_resources)),
                'total_folders': len(folders),
                'total_archives': len(archives)
            }
            
            # Category analysis
            category_counts = {}
            for resource in all_resources:
                category = resource['category']
                category_counts[category] = category_counts.get(category, 0) + 1
            
            analysis['top_categories'] = sorted(category_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Technology analysis
            tech_counts = {}
            tech_patterns = {
                'React': ['react', 'jsx', 'hooks'],
                'Vue': ['vue', 'vuejs'],
                'Angular': ['angular', 'typescript'],
                'Python': ['python', 'django', 'flask'],
                'JavaScript': ['javascript', 'js', 'node'],
                'CSS': ['css', 'sass', 'scss'],
                'HTML': ['html', 'html5'],
                'Docker': ['docker', 'container'],
                'Git': ['git', 'github', 'gitlab'],
                'API': ['api', 'rest', 'graphql'],
                'Database': ['sql', 'mongodb', 'postgres'],
                'Design': ['figma', 'sketch', 'ui', 'ux']
            }
            
            for resource in all_resources:
                content_lower = resource['content'].lower()
                for tech, patterns in tech_patterns.items():
                    if any(pattern in content_lower for pattern in patterns):
                        tech_counts[tech] = tech_counts.get(tech, 0) + 1
            
            analysis['technologies'] = sorted(tech_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Generate recommendations
            recommendations = []
            
            if analysis['total_resources'] > 50:
                recommendations.append("Consider creating more specific folders to organize your resources")
            
            if len(analysis['top_categories']) > 10:
                recommendations.append("You have many categories - consider consolidating similar ones")
            
            if any(count > 20 for _, count in analysis['top_categories'][:3]):
                recommendations.append("Create archives for your most popular categories")
            
            analysis['recommendations'] = recommendations
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error in content analysis: {e}")
            return {'total_resources': 0, 'total_categories': 0, 'total_folders': 0, 'total_archives': 0}
    
    def _extract_technologies_from_text(self, text: str) -> list:
        """Extract technology names from text."""
        technologies = []
        text_lower = text.lower()
        
        tech_keywords = {
            'react', 'vue', 'angular', 'python', 'javascript', 'typescript',
            'css', 'html', 'sass', 'scss', 'node', 'express', 'django',
            'flask', 'docker', 'kubernetes', 'git', 'github', 'api', 'rest',
            'graphql', 'sql', 'mongodb', 'postgres', 'figma', 'sketch',
            'photoshop', 'illustrator', 'ui', 'ux', 'design', 'frontend',
            'backend', 'fullstack', 'mobile', 'ios', 'android', 'swift',
            'kotlin', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust'
        }
        
        for tech in tech_keywords:
            if tech in text_lower:
                technologies.append(tech.capitalize())
        
        return list(set(technologies))
    
    async def _handle_command_intent(self, update: Update, context: ContextTypes.DEFAULT_TYPE, command_intent):
        """Handle interpreted natural language commands."""
        try:
            command_type = command_intent.command_type
            parameters = command_intent.parameters
            language = command_intent.language
            
            # Show processing message
            if language == 'ru':
                status_msg = await update.message.reply_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...")
            else:
                status_msg = await update.message.reply_text("ü§ñ Executing command...")
            
            if command_type == CommandType.SEARCH:
                query = parameters.get('query', '')
                if query:
                    await self._execute_search_command(update, context, query, language)
                else:
                    await self._send_search_help(update, language)
            
            elif command_type == CommandType.CREATE_FOLDER:
                folder_name = parameters.get('name', '')
                if folder_name:
                    await self._execute_create_folder_command(update, context, folder_name, language)
                else:
                    await self._send_folder_help(update, language)
            
            elif command_type == CommandType.CREATE_ARCHIVE:
                archive_name = parameters.get('name', '')
                if archive_name:
                    await self._execute_create_archive_command(update, context, archive_name, language)
                else:
                    await self._send_archive_help(update, language)
            
            elif command_type == CommandType.LIST:
                category = parameters.get('category', '')
                await self._execute_list_command(update, context, category, language)
            
            elif command_type == CommandType.HELP:
                await self._execute_help_command(update, context, language)
            
            elif command_type == CommandType.STATS:
                await self._execute_stats_command(update, context, language)
            
            elif command_type == CommandType.EXPORT:
                await self._execute_export_command(update, context, language)
            
            elif command_type == CommandType.ANALYZE:
                query = parameters.get('query', '')
                await self._execute_analyze_command(update, context, query, language)
            
            elif command_type == CommandType.DELETE:
                target = parameters.get('target', '')
                await self._execute_delete_command(update, context, target, language)
            
            await status_msg.delete()
            
        except Exception as e:
            logger.error(f"Error handling command intent: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã" if language == 'ru' else "‚ùå Command execution error"
            await update.message.reply_text(error_msg)
    
    async def _execute_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute search command."""
        results = self.storage.search_resources(query)
        
        if results:
            if language == 'ru':
                response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':**\n\n"
            else:
                response = f"üîç **Search results for '{query}':**\n\n"
            
            for i, result in enumerate(results[:10], 1):
                response += f"{i}. **{result['category']}** - {result['description'][:100]}...\n"
                response += f"   üÜî ID: {result['id']}\n\n"
            
            if len(results) > 10:
                if language == 'ru':
                    response += f"... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                else:
                    response += f"... and {len(results) - 10} more results\n"
        else:
            if language == 'ru':
                response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
            else:
                response = f"‚ùå No results found for '{query}'"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, folder_name: str, language: str):
        """Execute create folder command."""
        try:
            folder_id = self.storage.create_folder(folder_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {folder_id}"
            else:
                response = f"‚úÖ Folder '{folder_name}' created successfully!\nüÜî ID: {folder_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{folder_name}'"
            else:
                response = f"‚ùå Error creating folder '{folder_name}'"
            await update.message.reply_text(response)
    
    async def _execute_create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, archive_name: str, language: str):
        """Execute create archive command."""
        try:
            archive_id = self.storage.create_archive(archive_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ê—Ä—Ö–∏–≤ '{archive_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {archive_id}"
            else:
                response = f"‚úÖ Archive '{archive_name}' created successfully!\nüÜî ID: {archive_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ '{archive_name}'"
            else:
                response = f"‚ùå Error creating archive '{archive_name}'"
            await update.message.reply_text(response)
    
    async def _execute_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, language: str):
        """Execute list command."""
        if category:
            resources = self.storage.get_resources_by_category(category)
            if language == 'ru':
                title = f"üìã –†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
            else:
                title = f"üìã Resources in category '{category}':"
        else:
            resources = self.storage.get_all_resources()
            if language == 'ru':
                title = "üìã –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã:"
            else:
                title = "üìã All resources:"
        
        if resources:
            response = f"**{title}**\n\n"
            for i, resource in enumerate(resources[:20], 1):
                response += f"{i}. **{resource['category']}** - {resource['description'][:80]}...\n"
            
            if len(resources) > 20:
                if language == 'ru':
                    response += f"\n... –∏ –µ—â–µ {len(resources) - 20} —Ä–µ—Å—É—Ä—Å–æ–≤"
                else:
                    response += f"\n... and {len(resources) - 20} more resources"
        else:
            if language == 'ru':
                response = "‚ùå –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                response = "‚ùå No resources found"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute help command."""
        if language == 'ru':
            help_text = (
                "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
                "**–ü–æ–∏—Å–∫:**\n"
                "‚Ä¢ '–Ω–∞–π–¥–∏ Python –∫–æ–¥'\n"
                "‚Ä¢ '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'\n\n"
                "**–°–æ–∑–¥–∞–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'\n"
                "‚Ä¢ '—Å–¥–µ–ª–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤'\n\n"
                "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n"
                "‚Ä¢ '—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'\n"
                "‚Ä¢ '–ø–æ–º–æ—â—å'\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!"
            )
        else:
            help_text = (
                "üÜò **Command Help**\n\n"
                "**Search:**\n"
                "‚Ä¢ 'find Python code'\n"
                "‚Ä¢ 'show all documents'\n\n"
                "**Creation:**\n"
                "‚Ä¢ 'create project folder'\n"
                "‚Ä¢ 'make archive for old files'\n\n"
                "**Management:**\n"
                "‚Ä¢ 'statistics'\n"
                "‚Ä¢ 'export data'\n"
                "‚Ä¢ 'help'\n\n"
                "üí° Just speak naturally!"
            )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute stats command."""
        analysis = await self._analyze_content()
        
        if language == 'ru':
            response = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üìÅ –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {analysis['total_resources']}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis['total_categories']}\n"
                f"üóÇ –ü–∞–ø–æ–∫: {analysis['total_folders']}\n"
                f"üì¶ –ê—Ä—Ö–∏–≤–æ–≤: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        else:
            response = (
                f"üìä **Statistics**\n\n"
                f"üìÅ Total resources: {analysis['total_resources']}\n"
                f"üìÇ Categories: {analysis['total_categories']}\n"
                f"üóÇ Folders: {analysis['total_folders']}\n"
                f"üì¶ Archives: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**Top categories:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute export command."""
        if language == 'ru':
            response = "üì§ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!"
        else:
            response = "üì§ Export functionality will be available in the next update!"
        
        await update.message.reply_text(response)
    
    async def _execute_analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute analyze command."""
        if query:
            results = self.storage.search_resources(query)
            if results:
                if language == 'ru':
                    response = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'\n\n"
                    response += "üìä –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
                else:
                    response = f"üîç Found {len(results)} resources for '{query}'\n\n"
                    response += "üìä Brief analysis of found content will be added in the next update."
            else:
                if language == 'ru':
                    response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                else:
                    response = f"‚ùå Nothing found to analyze for '{query}'"
        else:
            await self._execute_stats_command(update, context, language)
            return
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target: str, language: str):
        """Execute delete command."""
        if language == 'ru':
            response = f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è '{target}' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!\n"
            response += "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        else:
            response = f"‚ö†Ô∏è Delete functionality for '{target}' will be available in the next update!\n"
            response += "For data safety, this function requires additional confirmation."
        
        await update.message.reply_text(response)
    
    async def _send_search_help(self, update: Update, language: str):
        """Send search help message."""
        if language == 'ru':
            response = "üîç –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –∫–æ–¥ –Ω–∞ Python'"
        else:
            response = "üîç Please specify what to search for. Example: 'find Python code'"
        await update.message.reply_text(response)
    
    async def _send_folder_help(self, update: Update, language: str):
        """Send folder creation help message."""
        if language == 'ru':
            response = "üìÅ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è React –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üìÅ Please specify folder name. Example: 'create folder for React projects'"
        await update.message.reply_text(response)
    
    async def _send_archive_help(self, update: Update, language: str):
        """Send archive creation help message."""
        if language == 'ru':
            response = "üì¶ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üì¶ Please specify archive name. Example: 'create archive for old projects'"
        await update.message.reply_text(response)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("delete_confirm_"):
            # Extract target from callback data
            target = data.replace("delete_confirm_", "")
            
            try:
                # Perform actual deletion using storage
                success = await self.storage.delete_item(target)
                
                if success:
                    # Determine language from user context or message
                    language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                    
                    if language == 'ru':
                        response = f"‚úÖ '{target}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                    else:
                        response = f"‚úÖ '{target}' successfully deleted!"
                else:
                    if language == 'ru':
                        response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å '{target}'. –í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    else:
                        response = f"‚ùå Failed to delete '{target}'. Item might not exist."
                        
            except Exception as e:
                logger.error(f"Error deleting item: {e}")
                language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                
                if language == 'ru':
                    response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"
                else:
                    response = f"‚ùå Error during deletion: {str(e)}"
            
            # Edit the original message
            await query.edit_message_text(response)
            
        elif data == "delete_cancel":
            # Determine language
            language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
            
            if language == 'ru':
                response = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            else:
                response = "‚ùå Deletion cancelled."
            
            await query.edit_message_text(response)
        
        else:
            # Handle other callback queries if needed
            logger.warning(f"Unknown callback query data: {data}")
    
    async def _delete_resource(self, query, resource_id: str):
        """Delete a resource."""
        try:
            success = self.storage.delete_resource(resource_id)
            if success:
                await query.edit_message_text("‚úÖ Resource deleted successfully")
            else:
                await query.edit_message_text("‚ùå Failed to delete resource")
                
        except Exception as e:
            logger.error(f"Error deleting resource: {e}")
            await query.edit_message_text("‚ùå Error deleting resource")
    
    def run(self):
        """Start the bot."""
        logger.info("Starting DevDataSorter bot...")
        try:
            # Create event loop if it doesn't exist
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        self.app.run_polling(drop_pending_updates=True)
        logger.info("Bot stopped")

    async def create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create a virtual folder for organizing resources."""
        if not context.args:
            await update.message.reply_text(
                "üìÅ **Usage:** `/create_folder <folder_name> [description]`\n"
                "üìÅ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_folder <–∏–º—è_–ø–∞–ø–∫–∏> [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/create_folder react_projects React –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`\n"
                "‚Ä¢ `/create_folder design_resources UI/UX –¥–∏–∑–∞–π–Ω —Ä–µ—Å—É—Ä—Å—ã`"
            )
            return
        
        folder_name = context.args[0]
        description = ' '.join(context.args[1:]) if len(context.args) > 1 else f"–ü–∞–ø–∫–∞ –¥–ª—è {folder_name}"
        
        try:
            # Create folder as a special resource
            folder_id = self.storage.create_folder(
                name=folder_name,
                description=description,
                user_id=update.effective_user.id,
                username=update.effective_user.username
            )
            
            await update.message.reply_text(
                f"üìÅ **Folder created successfully!**\n\n"
                f"üìÇ **Name:** {folder_name}\n"
                f"üìù **Description:** {description}\n"
                f"üÜî **ID:** {folder_id}\n\n"
                f"üìÅ **–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_to_folder {folder_id}` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            await update.message.reply_text(
                "‚ùå Error creating folder. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create an archive from selected resources."""
        if not context.args:
            await update.message.reply_text(
                "üì¶ **Usage:** `/create_archive <archive_name> [resource_ids...]`\n"
                "üì¶ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_archive <–∏–º—è_–∞—Ä—Ö–∏–≤–∞> [id_—Ä–µ—Å—É—Ä—Å–æ–≤...]`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/create_archive web_dev_2024 abc123 def456 ghi789`\n"
                "‚Ä¢ `/create_archive react_components` (—Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö React —Ä–µ—Å—É—Ä—Å–æ–≤)"
            )
            return
        
        archive_name = context.args[0]
        resource_ids = context.args[1:] if len(context.args) > 1 else []
        
        try:
            # If no specific IDs provided, use smart selection
            if not resource_ids:
                resource_ids = await self._smart_select_resources_for_archive(archive_name)
            
            archive_id = self.storage.create_archive(
                name=archive_name,
                resource_ids=resource_ids,
                user_id=update.effective_user.id,
                username=update.effective_user.username
            )
            
            await update.message.reply_text(
                f"üì¶ **Archive created successfully!**\n\n"
                f"üìÇ **Name:** {archive_name}\n"
                f"üìä **Resources:** {len(resource_ids)}\n"
                f"üÜî **ID:** {archive_id}\n\n"
                f"üì¶ **–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/export_archive {archive_id}` –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            await update.message.reply_text(
                "‚ùå Error creating archive. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def find_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Find folders and archives by name or content."""
        if not context.args:
            await update.message.reply_text(
                "üîç **Usage:** `/find_folder <search_query>`\n"
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/find_folder <–ø–æ–∏—Å–∫–æ–≤—ã–π_–∑–∞–ø—Ä–æ—Å>`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/find_folder react`\n"
                "‚Ä¢ `/find_folder –¥–∏–∑–∞–π–Ω`\n"
                "‚Ä¢ `/find_folder web development`"
            )
            return
        
        query = ' '.join(context.args)
        
        try:
            folders = self.storage.find_folders(query)
            archives = self.storage.find_archives(query)
            
            if folders or archives:
                response = f"üîç **Search Results for '{query}':**\n\n"
                
                if folders:
                    response += "üìÅ **Folders:**\n"
                    for folder in folders[:5]:
                        response += f"‚Ä¢ {folder['name']} - {folder['description'][:50]}...\n"
                        response += f"  üÜî ID: {folder['id']} | üìä Items: {folder.get('item_count', 0)}\n\n"
                
                if archives:
                    response += "üì¶ **Archives:**\n"
                    for archive in archives[:5]:
                        response += f"‚Ä¢ {archive['name']} - {archive.get('description', 'Archive')[:50]}...\n"
                        response += f"  üÜî ID: {archive['id']} | üìä Items: {len(archive.get('resource_ids', []))}\n\n"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No folders or archives found for '{query}'.\n"
                    f"‚ùå –ü–∞–ø–∫–∏ –∏–ª–∏ –∞—Ä—Ö–∏–≤—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                
        except Exception as e:
            logger.error(f"Error finding folders: {e}")
            await update.message.reply_text(
                "‚ùå Search error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def smart_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced search with AI-powered understanding."""
        if not context.args:
            await update.message.reply_text(
                "üß† **Usage:** `/smart_search <natural_language_query>`\n"
                "üß† **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/smart_search <–∑–∞–ø—Ä–æ—Å_–Ω–∞_–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º_—è–∑—ã–∫–µ>`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/smart_search –Ω–∞–π–¥–∏ –≤—Å–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—É–∫–∞–º–∏`\n"
                "‚Ä¢ `/smart_search show me Python tutorials for beginners`\n"
                "‚Ä¢ `/smart_search –¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π`"
            )
            return
        
        query = ' '.join(context.args)
        
        try:
            # Show processing indicator
            status_msg = await update.message.reply_text("üß† Analyzing query / –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
            
            # Use AI to understand and enhance the query
            enhanced_query = await self._enhance_search_query(query)
            
            # Perform enhanced search
            results = await self._perform_smart_search(enhanced_query)
            
            await status_msg.delete()
            
            if results:
                response = f"üß† **Smart Search Results for '{query}':**\n\n"
                
                for i, result in enumerate(results[:8], 1):
                    relevance = result.get('relevance_score', 0.0)
                    response += (
                        f"{i}. **{result['category']}** - {result['description'][:80]}...\n"
                        f"   üéØ Relevance: {relevance:.1f}/10 | üÜî ID: {result['id']}\n\n"
                    )
                
                if len(results) > 8:
                    response += f"... and {len(results) - 8} more results\n\n"
                
                response += f"üìä Found {len(results)} relevant results"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No relevant results found for '{query}'.\n"
                    f"‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                
        except Exception as e:
            logger.error(f"Error in smart search: {e}")
            await update.message.reply_text(
                "‚ùå Smart search error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Analyze and provide insights about stored content."""
        try:
            # Show processing indicator
            status_msg = await update.message.reply_text("üìä Analyzing content / –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
            
            # Get comprehensive analysis
            analysis = await self._perform_content_analysis()
            
            await status_msg.delete()
            
            response = (
                "üìä **Content Analysis / –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n\n"
                f"üìÇ **Total Resources / –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤:** {analysis['total_resources']}\n"
                f"üè∑Ô∏è **Categories / –ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {analysis['total_categories']}\n"
                f"üìÅ **Folders / –ü–∞–ø–æ–∫:** {analysis['total_folders']}\n"
                f"üì¶ **Archives / –ê—Ä—Ö–∏–≤–æ–≤:** {analysis['total_archives']}\n\n"
            )
            
            # Top categories
            if analysis.get('top_categories'):
                response += "üîù **Top Categories / –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
                response += "\n"
            
            # Technology insights
            if analysis.get('technologies'):
                response += "üíª **Technologies Found / –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n"
                for tech, count in analysis['technologies'][:8]:
                    response += f"‚Ä¢ {tech}: {count}\n"
                response += "\n"
            
            # Recommendations
            if analysis.get('recommendations'):
                response += "üí° **Recommendations / –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                for rec in analysis['recommendations'][:3]:
                    response += f"‚Ä¢ {rec}\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error in analysis: {e}")
            await update.message.reply_text(
                "‚ùå Analysis error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo messages."""
        try:
            # Get photo and caption
            photo = update.message.photo[-1]  # Get highest resolution
            caption = update.message.caption or "Image without description"
            
            # Download photo
            file = await context.bot.get_file(photo.file_id)
            file_path = f"temp_image_{photo.file_id}.jpg"
            await file.download_to_drive(file_path)
            
            try:
                # Process image with file handler
                image_analysis = await self.file_handler.process_image(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nImage analysis: {image_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process image / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle document messages."""
        try:
            document = update.message.document
            caption = update.message.caption or "Document without description"
            
            # Check file size (limit to 20MB)
            if document.file_size > 20 * 1024 * 1024:
                await update.message.reply_text(
                    "‚ùå File too large (max 20MB) / –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 20–ú–ë)"
                )
                return
            
            # Download document
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_doc_{document.file_id}_{document.file_name}"
            await file.download_to_drive(file_path)
            
            try:
                # Process document with file handler
                doc_analysis = await self.file_handler.process_document(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nDocument: {document.file_name}\nSize: {document.file_size} bytes\nAnalysis: {doc_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling document: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process document / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        # Handle different callback types
        if query.data.startswith('view_'):
            resource_id = query.data.split('_')[1]
            await self._show_resource_details(query, resource_id)
        elif query.data.startswith('delete_'):
            resource_id = query.data.split('_')[1]
            await self._delete_resource(query, resource_id)
    
    async def _show_resource_details(self, query, resource_id: str):
        """Show detailed information about a resource."""
        try:
            resource = self.storage.get_resource(resource_id)
            if resource:
                response = (
                    f"üìÑ **Resource Details:**\n\n"
                    f"üÜî **ID:** {resource['id']}\n"
                    f"üìÇ **Category:** {resource['category']}\n"
                    f"üìù **Description:** {resource['description']}\n"
                    f"üìÖ **Created:** {resource['created_at']}\n\n"
                    f"üìÑ **Content:**\n{resource['content'][:500]}..."
                )
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.edit_message_text("‚ùå Resource not found")
                
        except Exception as e:
            logger.error(f"Error showing resource details: {e}")
            await query.edit_message_text("‚ùå Error retrieving resource")
    
    async def _delete_resource(self, query, resource_id: str):
        """Delete a resource."""
        try:
            success = self.storage.delete_resource(resource_id)
            if success:
                await query.edit_message_text("‚úÖ Resource deleted successfully")
            else:
                await query.edit_message_text("‚ùå Failed to delete resource")
                
        except Exception as e:
            logger.error(f"Error deleting resource: {e}")
            await query.edit_message_text("‚ùå Error deleting resource")
    
    async def _smart_select_resources_for_archive(self, archive_name: str) -> list:
        """Smart selection of resources for archive based on name."""
        try:
            # Extract keywords from archive name
            keywords = archive_name.lower().replace('_', ' ').split()
            
            # Search for relevant resources
            all_resources = self.storage.get_all_resources()
            selected = []
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Score based on keyword matches
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 3
                    if keyword in desc_lower:
                        score += 2
                    if keyword in category_lower:
                        score += 4
                
                # Include if score is high enough
                if score >= 2:
                    selected.append(resource['id'])
            
            # Limit to 20 most recent if too many
            if len(selected) > 20:
                selected = selected[-20:]
            
            return selected
            
        except Exception as e:
            logger.error(f"Error in smart resource selection: {e}")
            return []
    
    async def _enhance_search_query(self, query: str) -> dict:
        """Use AI to enhance and understand search query."""
        try:
            # Create enhanced prompt for query understanding
            prompt = f"""
Analyze this search query and extract key information:
Query: "{query}"

Provide a JSON response with:
{{
    "keywords": ["list", "of", "key", "terms"],
    "categories": ["relevant", "categories"],
    "technologies": ["mentioned", "technologies"],
    "intent": "what user is looking for",
    "language": "detected language (en/ru)",
    "filters": {{
        "file_types": ["if", "specific", "types"],
        "difficulty": "beginner/intermediate/advanced or null",
        "recency": "recent/old or null"
    }}
}}

Focus on web development, design, programming topics.
"""
            
            # Try to get AI enhancement
            if self.classifier.groq_client:
                response = await self.classifier._call_groq_api(prompt)
                if response and 'keywords' in response:
                    return response
            
            # Fallback to simple keyword extraction
            return {
                "keywords": query.lower().split(),
                "categories": [],
                "technologies": self._extract_technologies_from_text(query),
                "intent": "search",
                "language": "ru" if any(ord(c) > 127 for c in query) else "en",
                "filters": {}
            }
            
        except Exception as e:
            logger.error(f"Error enhancing search query: {e}")
            return {"keywords": query.lower().split(), "categories": [], "technologies": [], "intent": "search", "language": "en", "filters": {}}
    
    async def _perform_smart_search(self, enhanced_query: dict) -> list:
        """Perform enhanced search using AI-processed query."""
        try:
            all_resources = self.storage.get_all_resources()
            scored_results = []
            
            keywords = enhanced_query.get('keywords', [])
            categories = enhanced_query.get('categories', [])
            technologies = enhanced_query.get('technologies', [])
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Keyword matching
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 2
                    if keyword in desc_lower:
                        score += 3
                    if keyword in category_lower:
                        score += 4
                
                # Category matching
                for category in categories:
                    if category.lower() in category_lower:
                        score += 5
                
                # Technology matching
                for tech in technologies:
                    if tech.lower() in content_lower or tech.lower() in desc_lower:
                        score += 3
                
                # URL bonus for web development content
                if any(url_indicator in content_lower for url_indicator in ['http', 'www', '.com', '.org', 'github']):
                    score += 1
                
                if score > 0:
                    # Calculate relevance score (0-10)
                    relevance = min(10, score)
                    
                    result = resource.copy()
                    result['relevance_score'] = relevance
                    scored_results.append(result)
            
            # Sort by relevance score
            scored_results.sort(key=lambda x: x['relevance_score'], reverse=True)
            
            return scored_results
            
        except Exception as e:
            logger.error(f"Error in smart search: {e}")
            return []
    
    async def _perform_content_analysis(self) -> dict:
        """Perform comprehensive analysis of stored content."""
        try:
            all_resources = self.storage.get_all_resources()
            folders = self.storage.get_all_folders()
            archives = self.storage.get_all_archives()
            
            # Basic statistics
            analysis = {
                'total_resources': len(all_resources),
                'total_categories': len(set(r['category'] for r in all_resources)),
                'total_folders': len(folders),
                'total_archives': len(archives)
            }
            
            # Category analysis
            category_counts = {}
            for resource in all_resources:
                category = resource['category']
                category_counts[category] = category_counts.get(category, 0) + 1
            
            analysis['top_categories'] = sorted(category_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Technology analysis
            tech_counts = {}
            tech_patterns = {
                'React': ['react', 'jsx', 'hooks'],
                'Vue': ['vue', 'vuejs'],
                'Angular': ['angular', 'typescript'],
                'Python': ['python', 'django', 'flask'],
                'JavaScript': ['javascript', 'js', 'node'],
                'CSS': ['css', 'sass', 'scss'],
                'HTML': ['html', 'html5'],
                'Docker': ['docker', 'container'],
                'Git': ['git', 'github', 'gitlab'],
                'API': ['api', 'rest', 'graphql'],
                'Database': ['sql', 'mongodb', 'postgres'],
                'Design': ['figma', 'sketch', 'ui', 'ux']
            }
            
            for resource in all_resources:
                content_lower = resource['content'].lower()
                for tech, patterns in tech_patterns.items():
                    if any(pattern in content_lower for pattern in patterns):
                        tech_counts[tech] = tech_counts.get(tech, 0) + 1
            
            analysis['technologies'] = sorted(tech_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Generate recommendations
            recommendations = []
            
            if analysis['total_resources'] > 50:
                recommendations.append("Consider creating more specific folders to organize your resources")
            
            if len(analysis['top_categories']) > 10:
                recommendations.append("You have many categories - consider consolidating similar ones")
            
            if any(count > 20 for _, count in analysis['top_categories'][:3]):
                recommendations.append("Create archives for your most popular categories")
            
            analysis['recommendations'] = recommendations
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error in content analysis: {e}")
            return {'total_resources': 0, 'total_categories': 0, 'total_folders': 0, 'total_archives': 0}
    
    def _extract_technologies_from_text(self, text: str) -> list:
        """Extract technology names from text."""
        technologies = []
        text_lower = text.lower()
        
        tech_keywords = {
            'react', 'vue', 'angular', 'python', 'javascript', 'typescript',
            'css', 'html', 'sass', 'scss', 'node', 'express', 'django',
            'flask', 'docker', 'kubernetes', 'git', 'github', 'api', 'rest',
            'graphql', 'sql', 'mongodb', 'postgres', 'figma', 'sketch',
            'photoshop', 'illustrator', 'ui', 'ux', 'design', 'frontend',
            'backend', 'fullstack', 'mobile', 'ios', 'android', 'swift',
            'kotlin', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust'
        }
        
        for tech in tech_keywords:
            if tech in text_lower:
                technologies.append(tech.capitalize())
        
        return list(set(technologies))
    
    async def _handle_command_intent(self, update: Update, context: ContextTypes.DEFAULT_TYPE, command_intent):
        """Handle interpreted natural language commands."""
        try:
            command_type = command_intent.command_type
            parameters = command_intent.parameters
            language = command_intent.language
            
            # Show processing message
            if language == 'ru':
                status_msg = await update.message.reply_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...")
            else:
                status_msg = await update.message.reply_text("ü§ñ Executing command...")
            
            if command_type == CommandType.SEARCH:
                query = parameters.get('query', '')
                if query:
                    await self._execute_search_command(update, context, query, language)
                else:
                    await self._send_search_help(update, language)
            
            elif command_type == CommandType.CREATE_FOLDER:
                folder_name = parameters.get('name', '')
                if folder_name:
                    await self._execute_create_folder_command(update, context, folder_name, language)
                else:
                    await self._send_folder_help(update, language)
            
            elif command_type == CommandType.CREATE_ARCHIVE:
                archive_name = parameters.get('name', '')
                if archive_name:
                    await self._execute_create_archive_command(update, context, archive_name, language)
                else:
                    await self._send_archive_help(update, language)
            
            elif command_type == CommandType.LIST:
                category = parameters.get('category', '')
                await self._execute_list_command(update, context, category, language)
            
            elif command_type == CommandType.HELP:
                await self._execute_help_command(update, context, language)
            
            elif command_type == CommandType.STATS:
                await self._execute_stats_command(update, context, language)
            
            elif command_type == CommandType.EXPORT:
                await self._execute_export_command(update, context, language)
            
            elif command_type == CommandType.ANALYZE:
                query = parameters.get('query', '')
                await self._execute_analyze_command(update, context, query, language)
            
            elif command_type == CommandType.DELETE:
                target = parameters.get('target', '')
                await self._execute_delete_command(update, context, target, language)
            
            await status_msg.delete()
            
        except Exception as e:
            logger.error(f"Error handling command intent: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã" if language == 'ru' else "‚ùå Command execution error"
            await update.message.reply_text(error_msg)
    
    async def _execute_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute search command."""
        results = self.storage.search_resources(query)
        
        if results:
            if language == 'ru':
                response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':**\n\n"
            else:
                response = f"üîç **Search results for '{query}':**\n\n"
            
            for i, result in enumerate(results[:10], 1):
                response += f"{i}. **{result['category']}** - {result['description'][:100]}...\n"
                response += f"   üÜî ID: {result['id']}\n\n"
            
            if len(results) > 10:
                if language == 'ru':
                    response += f"... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                else:
                    response += f"... and {len(results) - 10} more results\n"
        else:
            if language == 'ru':
                response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
            else:
                response = f"‚ùå No results found for '{query}'"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, folder_name: str, language: str):
        """Execute create folder command."""
        try:
            folder_id = self.storage.create_folder(folder_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {folder_id}"
            else:
                response = f"‚úÖ Folder '{folder_name}' created successfully!\nüÜî ID: {folder_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{folder_name}'"
            else:
                response = f"‚ùå Error creating folder '{folder_name}'"
            await update.message.reply_text(response)
    
    async def _execute_create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, archive_name: str, language: str):
        """Execute create archive command."""
        try:
            archive_id = self.storage.create_archive(archive_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ê—Ä—Ö–∏–≤ '{archive_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {archive_id}"
            else:
                response = f"‚úÖ Archive '{archive_name}' created successfully!\nüÜî ID: {archive_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ '{archive_name}'"
            else:
                response = f"‚ùå Error creating archive '{archive_name}'"
            await update.message.reply_text(response)
    
    async def _execute_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, language: str):
        """Execute list command."""
        if category:
            resources = self.storage.get_resources_by_category(category)
            if language == 'ru':
                title = f"üìã –†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
            else:
                title = f"üìã Resources in category '{category}':"
        else:
            resources = self.storage.get_all_resources()
            if language == 'ru':
                title = "üìã –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã:"
            else:
                title = "üìã All resources:"
        
        if resources:
            response = f"**{title}**\n\n"
            for i, resource in enumerate(resources[:20], 1):
                response += f"{i}. **{resource['category']}** - {resource['description'][:80]}...\n"
            
            if len(resources) > 20:
                if language == 'ru':
                    response += f"\n... –∏ –µ—â–µ {len(resources) - 20} —Ä–µ—Å—É—Ä—Å–æ–≤"
                else:
                    response += f"\n... and {len(resources) - 20} more resources"
        else:
            if language == 'ru':
                response = "‚ùå –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                response = "‚ùå No resources found"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute help command."""
        if language == 'ru':
            help_text = (
                "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
                "**–ü–æ–∏—Å–∫:**\n"
                "‚Ä¢ '–Ω–∞–π–¥–∏ Python –∫–æ–¥'\n"
                "‚Ä¢ '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'\n\n"
                "**–°–æ–∑–¥–∞–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'\n"
                "‚Ä¢ '—Å–¥–µ–ª–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤'\n\n"
                "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n"
                "‚Ä¢ '—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'\n"
                "‚Ä¢ '–ø–æ–º–æ—â—å'\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!"
            )
        else:
            help_text = (
                "üÜò **Command Help**\n\n"
                "**Search:**\n"
                "‚Ä¢ 'find Python code'\n"
                "‚Ä¢ 'show all documents'\n\n"
                "**Creation:**\n"
                "‚Ä¢ 'create project folder'\n"
                "‚Ä¢ 'make archive for old files'\n\n"
                "**Management:**\n"
                "‚Ä¢ 'statistics'\n"
                "‚Ä¢ 'export data'\n"
                "‚Ä¢ 'help'\n\n"
                "üí° Just speak naturally!"
            )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute stats command."""
        analysis = await self._analyze_content()
        
        if language == 'ru':
            response = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üìÅ –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {analysis['total_resources']}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis['total_categories']}\n"
                f"üóÇ –ü–∞–ø–æ–∫: {analysis['total_folders']}\n"
                f"üì¶ –ê—Ä—Ö–∏–≤–æ–≤: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        else:
            response = (
                f"üìä **Statistics**\n\n"
                f"üìÅ Total resources: {analysis['total_resources']}\n"
                f"üìÇ Categories: {analysis['total_categories']}\n"
                f"üóÇ Folders: {analysis['total_folders']}\n"
                f"üì¶ Archives: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**Top categories:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute export command."""
        if language == 'ru':
            response = "üì§ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!"
        else:
            response = "üì§ Export functionality will be available in the next update!"
        
        await update.message.reply_text(response)
    
    async def _execute_analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute analyze command."""
        if query:
            results = self.storage.search_resources(query)
            if results:
                if language == 'ru':
                    response = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'\n\n"
                    response += "üìä –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
                else:
                    response = f"üîç Found {len(results)} resources for '{query}'\n\n"
                    response += "üìä Brief analysis of found content will be added in the next update."
            else:
                if language == 'ru':
                    response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                else:
                    response = f"‚ùå Nothing found to analyze for '{query}'"
        else:
            await self._execute_stats_command(update, context, language)
            return
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target: str, language: str):
        """Execute delete command."""
        if language == 'ru':
            response = f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è '{target}' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!\n"
            response += "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        else:
            response = f"‚ö†Ô∏è Delete functionality for '{target}' will be available in the next update!\n"
            response += "For data safety, this function requires additional confirmation."
        
        await update.message.reply_text(response)
    
    async def _send_search_help(self, update: Update, language: str):
        """Send search help message."""
        if language == 'ru':
            response = "üîç –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –∫–æ–¥ –Ω–∞ Python'"
        else:
            response = "üîç Please specify what to search for. Example: 'find Python code'"
        await update.message.reply_text(response)
    
    async def _send_folder_help(self, update: Update, language: str):
        """Send folder creation help message."""
        if language == 'ru':
            response = "üìÅ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è React –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üìÅ Please specify folder name. Example: 'create folder for React projects'"
        await update.message.reply_text(response)
    
    async def _send_archive_help(self, update: Update, language: str):
        """Send archive creation help message."""
        if language == 'ru':
            response = "üì¶ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üì¶ Please specify archive name. Example: 'create archive for old projects'"
        await update.message.reply_text(response)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("delete_confirm_"):
            # Extract target from callback data
            target = data.replace("delete_confirm_", "")
            
            try:
                # Perform actual deletion using storage
                success = await self.storage.delete_item(target)
                
                if success:
                    # Determine language from user context or message
                    language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                    
                    if language == 'ru':
                        response = f"‚úÖ '{target}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                    else:
                        response = f"‚úÖ '{target}' successfully deleted!"
                else:
                    if language == 'ru':
                        response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å '{target}'. –í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    else:
                        response = f"‚ùå Failed to delete '{target}'. Item might not exist."
                        
            except Exception as e:
                logger.error(f"Error deleting item: {e}")
                language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                
                if language == 'ru':
                    response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"
                else:
                    response = f"‚ùå Error during deletion: {str(e)}"
            
            # Edit the original message
            await query.edit_message_text(response)
            
        elif data == "delete_cancel":
            # Determine language
            language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
            
            if language == 'ru':
                response = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            else:
                response = "‚ùå Deletion cancelled."
            
            await query.edit_message_text(response)
        
        else:
            # Handle other callback queries if needed
            logger.warning(f"Unknown callback query data: {data}")
    
    async def _delete_resource(self, query, resource_id: str):
        """Delete a resource."""
        try:
            success = self.storage.delete_resource(resource_id)
            if success:
                await query.edit_message_text("‚úÖ Resource deleted successfully")
            else:
                await query.edit_message_text("‚ùå Failed to delete resource")
                
        except Exception as e:
            logger.error(f"Error deleting resource: {e}")
            await query.edit_message_text("‚ùå Error deleting resource")
    
    def run(self):
        """Start the bot."""
        logger.info("Starting DevDataSorter bot...")
        try:
            # Create event loop if it doesn't exist
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        self.app.run_polling(drop_pending_updates=True)
        logger.info("Bot stopped")

    async def create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create a virtual folder for organizing resources."""
        if not context.args:
            await update.message.reply_text(
                "üìÅ **Usage:** `/create_folder <folder_name> [description]`\n"
                "üìÅ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_folder <–∏–º—è_–ø–∞–ø–∫–∏> [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/create_folder react_projects React –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`\n"
                "‚Ä¢ `/create_folder design_resources UI/UX –¥–∏–∑–∞–π–Ω —Ä–µ—Å—É—Ä—Å—ã`"
            )
            return
        
        folder_name = context.args[0]
        description = ' '.join(context.args[1:]) if len(context.args) > 1 else f"–ü–∞–ø–∫–∞ –¥–ª—è {folder_name}"
        
        try:
            # Create folder as a special resource
            folder_id = self.storage.create_folder(
                name=folder_name,
                description=description,
                user_id=update.effective_user.id,
                username=update.effective_user.username
            )
            
            await update.message.reply_text(
                f"üìÅ **Folder created successfully!**\n\n"
                f"üìÇ **Name:** {folder_name}\n"
                f"üìù **Description:** {description}\n"
                f"üÜî **ID:** {folder_id}\n\n"
                f"üìÅ **–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_to_folder {folder_id}` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            await update.message.reply_text(
                "‚ùå Error creating folder. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create an archive from selected resources."""
        if not context.args:
            await update.message.reply_text(
                "üì¶ **Usage:** `/create_archive <archive_name> [resource_ids...]`\n"
                "üì¶ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_archive <–∏–º—è_–∞—Ä—Ö–∏–≤–∞> [id_—Ä–µ—Å—É—Ä—Å–æ–≤...]`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/create_archive web_dev_2024 abc123 def456 ghi789`\n"
                "‚Ä¢ `/create_archive react_components` (—Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö React —Ä–µ—Å—É—Ä—Å–æ–≤)"
            )
            return
        
        archive_name = context.args[0]
        resource_ids = context.args[1:] if len(context.args) > 1 else []
        
        try:
            # If no specific IDs provided, use smart selection
            if not resource_ids:
                resource_ids = await self._smart_select_resources_for_archive(archive_name)
            
            archive_id = self.storage.create_archive(
                name=archive_name,
                resource_ids=resource_ids,
                user_id=update.effective_user.id,
                username=update.effective_user.username
            )
            
            await update.message.reply_text(
                f"üì¶ **Archive created successfully!**\n\n"
                f"üìÇ **Name:** {archive_name}\n"
                f"üìä **Resources:** {len(resource_ids)}\n"
                f"üÜî **ID:** {archive_id}\n\n"
                f"üì¶ **–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/export_archive {archive_id}` –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            await update.message.reply_text(
                "‚ùå Error creating archive. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def find_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Find folders and archives by name or content."""
        if not context.args:
            await update.message.reply_text(
                "üîç **Usage:** `/find_folder <search_query>`\n"
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/find_folder <–ø–æ–∏—Å–∫–æ–≤—ã–π_–∑–∞–ø—Ä–æ—Å>`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/find_folder react`\n"
                "‚Ä¢ `/find_folder –¥–∏–∑–∞–π–Ω`\n"
                "‚Ä¢ `/find_folder web development`"
            )
            return
        
        query = ' '.join(context.args)
        
        try:
            folders = self.storage.find_folders(query)
            archives = self.storage.find_archives(query)
            
            if folders or archives:
                response = f"üîç **Search Results for '{query}':**\n\n"
                
                if folders:
                    response += "üìÅ **Folders:**\n"
                    for folder in folders[:5]:
                        response += f"‚Ä¢ {folder['name']} - {folder['description'][:50]}...\n"
                        response += f"  üÜî ID: {folder['id']} | üìä Items: {folder.get('item_count', 0)}\n\n"
                
                if archives:
                    response += "üì¶ **Archives:**\n"
                    for archive in archives[:5]:
                        response += f"‚Ä¢ {archive['name']} - {archive.get('description', 'Archive')[:50]}...\n"
                        response += f"  üÜî ID: {archive['id']} | üìä Items: {len(archive.get('resource_ids', []))}\n\n"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No folders or archives found for '{query}'.\n"
                    f"‚ùå –ü–∞–ø–∫–∏ –∏–ª–∏ –∞—Ä—Ö–∏–≤—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                
        except Exception as e:
            logger.error(f"Error finding folders: {e}")
            await update.message.reply_text(
                "‚ùå Search error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def smart_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enhanced search with AI-powered understanding."""
        if not context.args:
            await update.message.reply_text(
                "üß† **Usage:** `/smart_search <natural_language_query>`\n"
                "üß† **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/smart_search <–∑–∞–ø—Ä–æ—Å_–Ω–∞_–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º_—è–∑—ã–∫–µ>`\n\n"
                "**Examples / –ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/smart_search –Ω–∞–π–¥–∏ –≤—Å–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—É–∫–∞–º–∏`\n"
                "‚Ä¢ `/smart_search show me Python tutorials for beginners`\n"
                "‚Ä¢ `/smart_search –¥–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π`"
            )
            return
        
        query = ' '.join(context.args)
        
        try:
            # Show processing indicator
            status_msg = await update.message.reply_text("üß† Analyzing query / –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
            
            # Use AI to understand and enhance the query
            enhanced_query = await self._enhance_search_query(query)
            
            # Perform enhanced search
            results = await self._perform_smart_search(enhanced_query)
            
            await status_msg.delete()
            
            if results:
                response = f"üß† **Smart Search Results for '{query}':**\n\n"
                
                for i, result in enumerate(results[:8], 1):
                    relevance = result.get('relevance_score', 0.0)
                    response += (
                        f"{i}. **{result['category']}** - {result['description'][:80]}...\n"
                        f"   üéØ Relevance: {relevance:.1f}/10 | üÜî ID: {result['id']}\n\n"
                    )
                
                if len(results) > 8:
                    response += f"... and {len(results) - 8} more results\n\n"
                
                response += f"üìä Found {len(results)} relevant results"
                
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(
                    f"‚ùå No relevant results found for '{query}'.\n"
                    f"‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                
        except Exception as e:
            logger.error(f"Error in smart search: {e}")
            await update.message.reply_text(
                "‚ùå Smart search error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Analyze and provide insights about stored content."""
        try:
            # Show processing indicator
            status_msg = await update.message.reply_text("üìä Analyzing content / –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
            
            # Get comprehensive analysis
            analysis = await self._perform_content_analysis()
            
            await status_msg.delete()
            
            response = (
                "üìä **Content Analysis / –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n\n"
                f"üìÇ **Total Resources / –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤:** {analysis['total_resources']}\n"
                f"üè∑Ô∏è **Categories / –ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {analysis['total_categories']}\n"
                f"üìÅ **Folders / –ü–∞–ø–æ–∫:** {analysis['total_folders']}\n"
                f"üì¶ **Archives / –ê—Ä—Ö–∏–≤–æ–≤:** {analysis['total_archives']}\n\n"
            )
            
            # Top categories
            if analysis.get('top_categories'):
                response += "üîù **Top Categories / –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
                response += "\n"
            
            # Technology insights
            if analysis.get('technologies'):
                response += "üíª **Technologies Found / –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n"
                for tech, count in analysis['technologies'][:8]:
                    response += f"‚Ä¢ {tech}: {count}\n"
                response += "\n"
            
            # Recommendations
            if analysis.get('recommendations'):
                response += "üí° **Recommendations / –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                for rec in analysis['recommendations'][:3]:
                    response += f"‚Ä¢ {rec}\n"
            
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error in analysis: {e}")
            await update.message.reply_text(
                "‚ùå Analysis error. Please try again.\n"
                "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo messages."""
        try:
            # Get photo and caption
            photo = update.message.photo[-1]  # Get highest resolution
            caption = update.message.caption or "Image without description"
            
            # Download photo
            file = await context.bot.get_file(photo.file_id)
            file_path = f"temp_image_{photo.file_id}.jpg"
            await file.download_to_drive(file_path)
            
            try:
                # Process image with file handler
                image_analysis = await self.file_handler.process_image(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nImage analysis: {image_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process image / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle document messages."""
        try:
            document = update.message.document
            caption = update.message.caption or "Document without description"
            
            # Check file size (limit to 20MB)
            if document.file_size > 20 * 1024 * 1024:
                await update.message.reply_text(
                    "‚ùå File too large (max 20MB) / –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 20–ú–ë)"
                )
                return
            
            # Download document
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_doc_{document.file_id}_{document.file_name}"
            await file.download_to_drive(file_path)
            
            try:
                # Process document with file handler
                doc_analysis = await self.file_handler.process_document(file_path, caption)
                
                # Combine caption and analysis
                content = f"{caption}\n\nDocument: {document.file_name}\nSize: {document.file_size} bytes\nAnalysis: {doc_analysis}"
                
                # Process as regular content
                await self._process_content(update, context, content)
                
            finally:
                # Clean up
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
        except Exception as e:
            logger.error(f"Error handling document: {e}")
            await update.message.reply_text(
                "‚ùå Failed to process document / –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        # Handle different callback types
        if query.data.startswith('view_'):
            resource_id = query.data.split('_')[1]
            await self._show_resource_details(query, resource_id)
        elif query.data.startswith('delete_'):
            resource_id = query.data.split('_')[1]
            await self._delete_resource(query, resource_id)
    
    async def _show_resource_details(self, query, resource_id: str):
        """Show detailed information about a resource."""
        try:
            resource = self.storage.get_resource(resource_id)
            if resource:
                response = (
                    f"üìÑ **Resource Details:**\n\n"
                    f"üÜî **ID:** {resource['id']}\n"
                    f"üìÇ **Category:** {resource['category']}\n"
                    f"üìù **Description:** {resource['description']}\n"
                    f"üìÖ **Created:** {resource['created_at']}\n\n"
                    f"üìÑ **Content:**\n{resource['content'][:500]}..."
                )
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                await query.edit_message_text("‚ùå Resource not found")
                
        except Exception as e:
            logger.error(f"Error showing resource details: {e}")
            await query.edit_message_text("‚ùå Error retrieving resource")
    
    async def _delete_resource(self, query, resource_id: str):
        """Delete a resource."""
        try:
            success = self.storage.delete_resource(resource_id)
            if success:
                await query.edit_message_text("‚úÖ Resource deleted successfully")
            else:
                await query.edit_message_text("‚ùå Failed to delete resource")
                
        except Exception as e:
            logger.error(f"Error deleting resource: {e}")
            await query.edit_message_text("‚ùå Error deleting resource")
    
    async def _smart_select_resources_for_archive(self, archive_name: str) -> list:
        """Smart selection of resources for archive based on name."""
        try:
            # Extract keywords from archive name
            keywords = archive_name.lower().replace('_', ' ').split()
            
            # Search for relevant resources
            all_resources = self.storage.get_all_resources()
            selected = []
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Score based on keyword matches
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 3
                    if keyword in desc_lower:
                        score += 2
                    if keyword in category_lower:
                        score += 4
                
                # Include if score is high enough
                if score >= 2:
                    selected.append(resource['id'])
            
            # Limit to 20 most recent if too many
            if len(selected) > 20:
                selected = selected[-20:]
            
            return selected
            
        except Exception as e:
            logger.error(f"Error in smart resource selection: {e}")
            return []
    
    async def _enhance_search_query(self, query: str) -> dict:
        """Use AI to enhance and understand search query."""
        try:
            # Create enhanced prompt for query understanding
            prompt = f"""
Analyze this search query and extract key information:
Query: "{query}"

Provide a JSON response with:
{{
    "keywords": ["list", "of", "key", "terms"],
    "categories": ["relevant", "categories"],
    "technologies": ["mentioned", "technologies"],
    "intent": "what user is looking for",
    "language": "detected language (en/ru)",
    "filters": {{
        "file_types": ["if", "specific", "types"],
        "difficulty": "beginner/intermediate/advanced or null",
        "recency": "recent/old or null"
    }}
}}

Focus on web development, design, programming topics.
"""
            
            # Try to get AI enhancement
            if self.classifier.groq_client:
                response = await self.classifier._call_groq_api(prompt)
                if response and 'keywords' in response:
                    return response
            
            # Fallback to simple keyword extraction
            return {
                "keywords": query.lower().split(),
                "categories": [],
                "technologies": self._extract_technologies_from_text(query),
                "intent": "search",
                "language": "ru" if any(ord(c) > 127 for c in query) else "en",
                "filters": {}
            }
            
        except Exception as e:
            logger.error(f"Error enhancing search query: {e}")
            return {"keywords": query.lower().split(), "categories": [], "technologies": [], "intent": "search", "language": "en", "filters": {}}
    
    async def _perform_smart_search(self, enhanced_query: dict) -> list:
        """Perform enhanced search using AI-processed query."""
        try:
            all_resources = self.storage.get_all_resources()
            scored_results = []
            
            keywords = enhanced_query.get('keywords', [])
            categories = enhanced_query.get('categories', [])
            technologies = enhanced_query.get('technologies', [])
            
            for resource in all_resources:
                score = 0
                content_lower = resource['content'].lower()
                desc_lower = resource['description'].lower()
                category_lower = resource['category'].lower()
                
                # Keyword matching
                for keyword in keywords:
                    if keyword in content_lower:
                        score += 2
                    if keyword in desc_lower:
                        score += 3
                    if keyword in category_lower:
                        score += 4
                
                # Category matching
                for category in categories:
                    if category.lower() in category_lower:
                        score += 5
                
                # Technology matching
                for tech in technologies:
                    if tech.lower() in content_lower or tech.lower() in desc_lower:
                        score += 3
                
                # URL bonus for web development content
                if any(url_indicator in content_lower for url_indicator in ['http', 'www', '.com', '.org', 'github']):
                    score += 1
                
                if score > 0:
                    # Calculate relevance score (0-10)
                    relevance = min(10, score)
                    
                    result = resource.copy()
                    result['relevance_score'] = relevance
                    scored_results.append(result)
            
            # Sort by relevance score
            scored_results.sort(key=lambda x: x['relevance_score'], reverse=True)
            
            return scored_results
            
        except Exception as e:
            logger.error(f"Error in smart search: {e}")
            return []
    
    async def _perform_content_analysis(self) -> dict:
        """Perform comprehensive analysis of stored content."""
        try:
            all_resources = self.storage.get_all_resources()
            folders = self.storage.get_all_folders()
            archives = self.storage.get_all_archives()
            
            # Basic statistics
            analysis = {
                'total_resources': len(all_resources),
                'total_categories': len(set(r['category'] for r in all_resources)),
                'total_folders': len(folders),
                'total_archives': len(archives)
            }
            
            # Category analysis
            category_counts = {}
            for resource in all_resources:
                category = resource['category']
                category_counts[category] = category_counts.get(category, 0) + 1
            
            analysis['top_categories'] = sorted(category_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Technology analysis
            tech_counts = {}
            tech_patterns = {
                'React': ['react', 'jsx', 'hooks'],
                'Vue': ['vue', 'vuejs'],
                'Angular': ['angular', 'typescript'],
                'Python': ['python', 'django', 'flask'],
                'JavaScript': ['javascript', 'js', 'node'],
                'CSS': ['css', 'sass', 'scss'],
                'HTML': ['html', 'html5'],
                'Docker': ['docker', 'container'],
                'Git': ['git', 'github', 'gitlab'],
                'API': ['api', 'rest', 'graphql'],
                'Database': ['sql', 'mongodb', 'postgres'],
                'Design': ['figma', 'sketch', 'ui', 'ux']
            }
            
            for resource in all_resources:
                content_lower = resource['content'].lower()
                for tech, patterns in tech_patterns.items():
                    if any(pattern in content_lower for pattern in patterns):
                        tech_counts[tech] = tech_counts.get(tech, 0) + 1
            
            analysis['technologies'] = sorted(tech_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Generate recommendations
            recommendations = []
            
            if analysis['total_resources'] > 50:
                recommendations.append("Consider creating more specific folders to organize your resources")
            
            if len(analysis['top_categories']) > 10:
                recommendations.append("You have many categories - consider consolidating similar ones")
            
            if any(count > 20 for _, count in analysis['top_categories'][:3]):
                recommendations.append("Create archives for your most popular categories")
            
            analysis['recommendations'] = recommendations
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error in content analysis: {e}")
            return {'total_resources': 0, 'total_categories': 0, 'total_folders': 0, 'total_archives': 0}
    
    def _extract_technologies_from_text(self, text: str) -> list:
        """Extract technology names from text."""
        technologies = []
        text_lower = text.lower()
        
        tech_keywords = {
            'react', 'vue', 'angular', 'python', 'javascript', 'typescript',
            'css', 'html', 'sass', 'scss', 'node', 'express', 'django',
            'flask', 'docker', 'kubernetes', 'git', 'github', 'api', 'rest',
            'graphql', 'sql', 'mongodb', 'postgres', 'figma', 'sketch',
            'photoshop', 'illustrator', 'ui', 'ux', 'design', 'frontend',
            'backend', 'fullstack', 'mobile', 'ios', 'android', 'swift',
            'kotlin', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust'
        }
        
        for tech in tech_keywords:
            if tech in text_lower:
                technologies.append(tech.capitalize())
        
        return list(set(technologies))
    
    async def _handle_command_intent(self, update: Update, context: ContextTypes.DEFAULT_TYPE, command_intent):
        """Handle interpreted natural language commands."""
        try:
            command_type = command_intent.command_type
            parameters = command_intent.parameters
            language = command_intent.language
            
            # Show processing message
            if language == 'ru':
                status_msg = await update.message.reply_text("ü§ñ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...")
            else:
                status_msg = await update.message.reply_text("ü§ñ Executing command...")
            
            if command_type == CommandType.SEARCH:
                query = parameters.get('query', '')
                if query:
                    await self._execute_search_command(update, context, query, language)
                else:
                    await self._send_search_help(update, language)
            
            elif command_type == CommandType.CREATE_FOLDER:
                folder_name = parameters.get('name', '')
                if folder_name:
                    await self._execute_create_folder_command(update, context, folder_name, language)
                else:
                    await self._send_folder_help(update, language)
            
            elif command_type == CommandType.CREATE_ARCHIVE:
                archive_name = parameters.get('name', '')
                if archive_name:
                    await self._execute_create_archive_command(update, context, archive_name, language)
                else:
                    await self._send_archive_help(update, language)
            
            elif command_type == CommandType.LIST:
                category = parameters.get('category', '')
                await self._execute_list_command(update, context, category, language)
            
            elif command_type == CommandType.HELP:
                await self._execute_help_command(update, context, language)
            
            elif command_type == CommandType.STATS:
                await self._execute_stats_command(update, context, language)
            
            elif command_type == CommandType.EXPORT:
                await self._execute_export_command(update, context, language)
            
            elif command_type == CommandType.ANALYZE:
                query = parameters.get('query', '')
                await self._execute_analyze_command(update, context, query, language)
            
            elif command_type == CommandType.DELETE:
                target = parameters.get('target', '')
                await self._execute_delete_command(update, context, target, language)
            
            await status_msg.delete()
            
        except Exception as e:
            logger.error(f"Error handling command intent: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã" if language == 'ru' else "‚ùå Command execution error"
            await update.message.reply_text(error_msg)
    
    async def _execute_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute search command."""
        results = self.storage.search_resources(query)
        
        if results:
            if language == 'ru':
                response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':**\n\n"
            else:
                response = f"üîç **Search results for '{query}':**\n\n"
            
            for i, result in enumerate(results[:10], 1):
                response += f"{i}. **{result['category']}** - {result['description'][:100]}...\n"
                response += f"   üÜî ID: {result['id']}\n\n"
            
            if len(results) > 10:
                if language == 'ru':
                    response += f"... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                else:
                    response += f"... and {len(results) - 10} more results\n"
        else:
            if language == 'ru':
                response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
            else:
                response = f"‚ùå No results found for '{query}'"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_create_folder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, folder_name: str, language: str):
        """Execute create folder command."""
        try:
            folder_id = self.storage.create_folder(folder_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {folder_id}"
            else:
                response = f"‚úÖ Folder '{folder_name}' created successfully!\nüÜî ID: {folder_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating folder: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{folder_name}'"
            else:
                response = f"‚ùå Error creating folder '{folder_name}'"
            await update.message.reply_text(response)
    
    async def _execute_create_archive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, archive_name: str, language: str):
        """Execute create archive command."""
        try:
            archive_id = self.storage.create_archive(archive_name, update.effective_user.id)
            
            if language == 'ru':
                response = f"‚úÖ –ê—Ä—Ö–∏–≤ '{archive_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüÜî ID: {archive_id}"
            else:
                response = f"‚úÖ Archive '{archive_name}' created successfully!\nüÜî ID: {archive_id}"
            
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error creating archive: {e}")
            if language == 'ru':
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ '{archive_name}'"
            else:
                response = f"‚ùå Error creating archive '{archive_name}'"
            await update.message.reply_text(response)
    
    async def _execute_list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, language: str):
        """Execute list command."""
        if category:
            resources = self.storage.get_resources_by_category(category)
            if language == 'ru':
                title = f"üìã –†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
            else:
                title = f"üìã Resources in category '{category}':"
        else:
            resources = self.storage.get_all_resources()
            if language == 'ru':
                title = "üìã –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã:"
            else:
                title = "üìã All resources:"
        
        if resources:
            response = f"**{title}**\n\n"
            for i, resource in enumerate(resources[:20], 1):
                response += f"{i}. **{resource['category']}** - {resource['description'][:80]}...\n"
            
            if len(resources) > 20:
                if language == 'ru':
                    response += f"\n... –∏ –µ—â–µ {len(resources) - 20} —Ä–µ—Å—É—Ä—Å–æ–≤"
                else:
                    response += f"\n... and {len(resources) - 20} more resources"
        else:
            if language == 'ru':
                response = "‚ùå –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                response = "‚ùå No resources found"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute help command."""
        if language == 'ru':
            help_text = (
                "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
                "**–ü–æ–∏—Å–∫:**\n"
                "‚Ä¢ '–Ω–∞–π–¥–∏ Python –∫–æ–¥'\n"
                "‚Ä¢ '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'\n\n"
                "**–°–æ–∑–¥–∞–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'\n"
                "‚Ä¢ '—Å–¥–µ–ª–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤'\n\n"
                "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
                "‚Ä¢ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n"
                "‚Ä¢ '—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'\n"
                "‚Ä¢ '–ø–æ–º–æ—â—å'\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!"
            )
        else:
            help_text = (
                "üÜò **Command Help**\n\n"
                "**Search:**\n"
                "‚Ä¢ 'find Python code'\n"
                "‚Ä¢ 'show all documents'\n\n"
                "**Creation:**\n"
                "‚Ä¢ 'create project folder'\n"
                "‚Ä¢ 'make archive for old files'\n\n"
                "**Management:**\n"
                "‚Ä¢ 'statistics'\n"
                "‚Ä¢ 'export data'\n"
                "‚Ä¢ 'help'\n\n"
                "üí° Just speak naturally!"
            )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute stats command."""
        analysis = await self._analyze_content()
        
        if language == 'ru':
            response = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üìÅ –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {analysis['total_resources']}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis['total_categories']}\n"
                f"üóÇ –ü–∞–ø–æ–∫: {analysis['total_folders']}\n"
                f"üì¶ –ê—Ä—Ö–∏–≤–æ–≤: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        else:
            response = (
                f"üìä **Statistics**\n\n"
                f"üìÅ Total resources: {analysis['total_resources']}\n"
                f"üìÇ Categories: {analysis['total_categories']}\n"
                f"üóÇ Folders: {analysis['total_folders']}\n"
                f"üì¶ Archives: {analysis['total_archives']}\n\n"
            )
            
            if analysis.get('top_categories'):
                response += "**Top categories:**\n"
                for category, count in analysis['top_categories'][:5]:
                    response += f"‚Ä¢ {category}: {count}\n"
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """Execute export command."""
        if language == 'ru':
            response = "üì§ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!"
        else:
            response = "üì§ Export functionality will be available in the next update!"
        
        await update.message.reply_text(response)
    
    async def _execute_analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, language: str):
        """Execute analyze command."""
        if query:
            results = self.storage.search_resources(query)
            if results:
                if language == 'ru':
                    response = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'\n\n"
                    response += "üìä –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
                else:
                    response = f"üîç Found {len(results)} resources for '{query}'\n\n"
                    response += "üìä Brief analysis of found content will be added in the next update."
            else:
                if language == 'ru':
                    response = f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                else:
                    response = f"‚ùå Nothing found to analyze for '{query}'"
        else:
            await self._execute_stats_command(update, context, language)
            return
        
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    
    async def _execute_delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target: str, language: str):
        """Execute delete command."""
        if language == 'ru':
            response = f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è '{target}' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!\n"
            response += "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        else:
            response = f"‚ö†Ô∏è Delete functionality for '{target}' will be available in the next update!\n"
            response += "For data safety, this function requires additional confirmation."
        
        await update.message.reply_text(response)
    
    async def _send_search_help(self, update: Update, language: str):
        """Send search help message."""
        if language == 'ru':
            response = "üîç –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –∫–æ–¥ –Ω–∞ Python'"
        else:
            response = "üîç Please specify what to search for. Example: 'find Python code'"
        await update.message.reply_text(response)
    
    async def _send_folder_help(self, update: Update, language: str):
        """Send folder creation help message."""
        if language == 'ru':
            response = "üìÅ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –¥–ª—è React –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üìÅ Please specify folder name. Example: 'create folder for React projects'"
        await update.message.reply_text(response)
    
    async def _send_archive_help(self, update: Update, language: str):
        """Send archive creation help message."""
        if language == 'ru':
            response = "üì¶ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å–æ–∑–¥–∞–π –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'"
        else:
            response = "üì¶ Please specify archive name. Example: 'create archive for old projects'"
        await update.message.reply_text(response)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("delete_confirm_"):
            # Extract target from callback data
            target = data.replace("delete_confirm_", "")
            
            try:
                # Perform actual deletion using storage
                success = await self.storage.delete_item(target)
                
                if success:
                    # Determine language from user context or message
                    language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                    
                    if language == 'ru':
                        response = f"‚úÖ '{target}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                    else:
                        response = f"‚úÖ '{target}' successfully deleted!"
                else:
                    if language == 'ru':
                        response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å '{target}'. –í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    else:
                        response = f"‚ùå Failed to delete '{target}'. Item might not exist."
                        
            except Exception as e:
                logger.error(f"Error deleting item: {e}")
                language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
                
                if language == 'ru':
                    response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"
                else:
                    response = f"‚ùå Error during deletion: {str(e)}"
            
            # Edit the original message
            await query.edit_message_text(response)
            
        elif data == "delete_cancel":
            # Determine language
            language = 'ru' if any(ord(c) > 127 for c in query.message.text) else 'en'
            
            if language == 'ru':
                response = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            else:
                response = "‚ùå Deletion cancelled."
            
            await query.edit_message_text(response)
        
        else:
            # Handle other callback queries if needed
            logger.warning(f"Unknown callback query data: {data}")
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
"""

import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from .classifier_minimal import ContentClassifier
from .config_minimal import get_telegram_token
from ..utils.storage_minimal import ResourceStorage

logger = logging.getLogger(__name__)

class DevDataSorterBot:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞."""
    
    def __init__(self, token: str = None):
        self.token = token or get_telegram_token()
        self.storage = ResourceStorage()
        self.classifier = ContentClassifier()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(self.token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(CommandHandler("list", self.list_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevDataSorter!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø—Ä–∞–≤–∫–∞
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
‚Ä¢ Frontend (HTML, CSS, JS, React, Vue)
‚Ä¢ Backend (API, Node.js, Python, PHP)
‚Ä¢ Database (SQL, MongoDB)
‚Ä¢ Tools (Docker, Git, npm)
‚Ä¢ Documentation (—Ç—É—Ç–æ—Ä–∏–∞–ª—ã, –≥–∞–π–¥—ã)
‚Ä¢ Code (–ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞)

–ü—Ä–∏–º–µ—Ä—ã:
"React hooks tutorial"
"Python Flask API example"
"MongoDB query optimization"
        """
        await update.message.reply_text(help_text)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search."""
        if not context.args:
            await update.message.reply_text(
                "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n"
                "–ü—Ä–∏–º–µ—Ä: /search React hooks"
            )
            return
        
        query = ' '.join(context.args)
        results = self.storage.search_resources(query)
        
        if not results:
            await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}':\n\n"
        
        for i, result in enumerate(results[:10], 1):
            response += f"{i}. üìÅ {result['category']}\n"
            response += f"   üìù {result['content'][:100]}...\n"
            if result.get('description'):
                response += f"   üí¨ {result['description'][:50]}...\n"
            response += f"   üÜî {result['id']}\n\n"
        
        if len(results) > 10:
            response += f"... –∏ –µ—â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        await update.message.reply_text(response)
    
    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list."""
        resources = self.storage.get_all_resources()
        
        if not resources:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
            return
        
        response = f"üìã –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}\n\n"
        
        for i, resource in enumerate(resources[:10], 1):
            response += f"{i}. üìÅ {resource['category']}\n"
            response += f"   üìù {resource['content'][:80]}...\n"
            response += f"   üÜî {resource['id']}\n\n"
        
        if len(resources) > 10:
            response += f"... –∏ –µ—â–µ {len(resources) - 10} —Ä–µ—Å—É—Ä—Å–æ–≤"
        
        await update.message.reply_text(response)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats."""
        stats = self.storage.get_statistics()
        categories = self.storage.get_categories()
        
        response = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üìö –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {stats['total_resources']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['categories_count']}
‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {stats.get('popular_category', '–ù–µ—Ç')}

üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
"""
        
        for category, count in categories.items():
            response += f"‚Ä¢ {category}: {count}\n"
        
        await update.message.reply_text(response)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = update.effective_user.id
        username = update.effective_user.username
        content = update.message.text
        
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            classification = await self.classifier.classify_content(content)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
            resource_id = self.storage.add_resource(
                content=content,
                category=classification['category'],
                user_id=user_id,
                username=username,
                confidence=classification['confidence'],
                description=classification['description']
            )
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = f"""‚úÖ –†–µ—Å—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {classification['category']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {classification['description']}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {classification['confidence']:.0%}
üÜî ID: {resource_id}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."""
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ DevDataSorter –±–æ—Ç–∞...")
        self.app.run_polling()
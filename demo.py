#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ DevDataSorter
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print(f" {title}")
    print("=" * 60)

def print_step(step, description):
    """–ü–µ—á–∞—Ç—å —à–∞–≥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print(f"\n[{step}] {description}")
    print("-" * 40)

def demo_config():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    
    try:
        from src.core.config import get_ai_config, TELEGRAM_BOT_TOKEN
        
        print_step("1", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if TELEGRAM_BOT_TOKEN:
            print(f"‚úì Telegram Bot Token: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(TELEGRAM_BOT_TOKEN)})")
        else:
            print("‚ö† Telegram Bot Token: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        ai_config = get_ai_config()
        provider = ai_config.get('provider', 'unknown')
        
        print(f"‚úì AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        
        if provider == 'groq':
            print("  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Groq API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        elif provider == 'ollama':
            print("  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è Ollama")
        elif provider == 'fallback':
            print("  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def demo_classifier():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AI –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê")
    
    try:
        from src.core.classifier import ContentClassifier
        
        print_step("1", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
        classifier = ContentClassifier()
        print(f"‚úì –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"‚úì –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {classifier.provider}")
        print(f"‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(classifier.categories)}")
        
        print_step("2", "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        categories = list(classifier.categories.keys())[:10]  # –ü–µ—Ä–≤—ã–µ 10
        for i, category in enumerate(categories, 1):
            description = classifier.categories[category]['description']
            print(f"  {i:2d}. {category}: {description}")
        
        if len(classifier.categories) > 10:
            print(f"     ... –∏ –µ—â–µ {len(classifier.categories) - 10} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        print_step("3", "–¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        
        test_content = """
        def hello_world():
            print("Hello, World!")
            return "success"
        """
        
        print("–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
        print(test_content)
        
        # Fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        result = classifier._fallback_classify(test_content)
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('category', 'unknown')}")
        print(f"  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('subcategory', 'unknown')}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2f}")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()

def demo_storage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ï–ù–ò–Ø")
    
    try:
        from src.utils.storage import ResourceStorage
        
        print_step("1", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        storage = ResourceStorage()
        print("‚úì –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        print_step("2", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        base_path = Path("data/sorted_content")
        if base_path.exists():
            dirs = [d for d in base_path.iterdir() if d.is_dir()]
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(dirs)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
            for d in dirs[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                files_count = len(list(d.rglob("*"))) if d.exists() else 0
                print(f"  - {d.name}: {files_count} —Ñ–∞–π–ª–æ–≤")
            if len(dirs) > 5:
                print(f"  ... –∏ –µ—â–µ {len(dirs) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è sorted_content –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")

def demo_web_interface():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê")
    
    try:
        print_step("1", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Flask")
        import flask
        print(f"‚úì Flask –≤–µ—Ä—Å–∏—è: {flask.__version__}")
        
        print_step("2", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–º–æ–¥—É–ª—è")
        from src.web.app import WebApp
        print("‚úì –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        print_step("3", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ")
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python -m src.web.app")
        print("")
        print("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
        print("  http://localhost:5000")
        print("")
        print("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
        print("  - –î–∞—à–±–æ—Ä–¥ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π")
        print("  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("  - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        print("  - GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        print("  - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

def demo_telegram_bot():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
    
    try:
        print_step("1", "–ü—Ä–æ–≤–µ—Ä–∫–∞ python-telegram-bot")
        import telegram
        print(f"‚úì python-telegram-bot –≤–µ—Ä—Å–∏—è: {telegram.__version__}")
        
        print_step("2", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞")
        from src.core.bot import DevDataSorterBot
        print("‚úì –ö–ª–∞—Å—Å –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print_step("3", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ")
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python main.py")
        print("")
        print("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:")
        print("  /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
        print("  /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        print("  /list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("  /search - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
        print("")
        print("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:")
        print("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤")
        print("  - –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫ –∏ URL")
        print("  - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
        print("  - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        print("  - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")

def demo_github_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø GITHUB –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    
    try:
        print_step("1", "–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub –º–æ–¥—É–ª—è")
        from src.utils.github_integration import create_github_integration
        print("‚úì GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print_step("2", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        github_token = os.getenv('GITHUB_TOKEN')
        github_username = os.getenv('GITHUB_USERNAME')
        
        if github_token:
            print(f"‚úì GitHub Token: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(github_token)})")
        else:
            print("‚ö† GitHub Token: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if github_username:
            print(f"‚úì GitHub Username: {github_username}")
        else:
            print("‚ö† GitHub Username: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print_step("3", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:")
        print("  - –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        print("  - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã")
        print("  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ DevDataSorter - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
    demo_config()
    demo_classifier()
    demo_storage()
    demo_web_interface()
    demo_telegram_bot()
    demo_github_integration()
    
    print_header("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:")
    print("")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: python health_check.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞: python main.py")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python -m src.web.app")
    print("5. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: —Å–º. SETUP_GUIDE.md")
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python tests/run_tests.py")
    print("")
    print("‚ú® –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏!")

if __name__ == "__main__":
    main()
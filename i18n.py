#!/usr/bin/env python3
"""
Internationalization (i18n) support for DevDataSorter.
Provides multi-language support for the Telegram bot.
"""

import json
import os
from typing import Dict, Optional

class I18nManager:
    """Manages internationalization for the bot."""
    
    def __init__(self, default_language='en'):
        self.default_language = default_language
        self.current_language = default_language
        self.translations = {}
        self.user_languages = {}  # user_id -> language_code
        self._load_translations()
    
    def _load_translations(self):
        """Load translation files."""
        translations_dir = 'translations'
        if not os.path.exists(translations_dir):
            os.makedirs(translations_dir)
            self._create_default_translations()
        
        # Load all translation files
        for filename in os.listdir(translations_dir):
            if filename.endswith('.json'):
                lang_code = filename[:-5]  # Remove .json extension
                filepath = os.path.join(translations_dir, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        self.translations[lang_code] = json.load(f)
                except Exception as e:
                    print(f"Error loading translation file {filename}: {e}")
    
    def _create_default_translations(self):
        """Create default translation files."""
        translations_dir = 'translations'
        
        # English translations
        en_translations = {
            "welcome": {
                "title": "ü§ñ Welcome to DevDataSorter!",
                "description": "I'll help you automatically classify and organize your development resources.",
                "features": {
                    "classify": "‚Ä¢ Classify links and content",
                    "sort": "‚Ä¢ Sort by categories",
                    "search": "‚Ä¢ Search through resources",
                    "save": "‚Ä¢ Save descriptions",
                    "files": "‚Ä¢ Process files and images",
                    "backup": "‚Ä¢ Create backups"
                },
                "start_help": "Start with /help command to get assistance.",
                "instruction": "Just send me text, links, files, or resource descriptions, and I'll automatically classify them!"
            },
            "commands": {
                "help": {
                    "title": "üìö Available Commands:",
                    "basic": {
                        "title": "üîß Basic Commands:",
                        "start": "/start - Start the bot",
                        "help": "/help - Show this help message",
                        "add": "/add <content> - Manually add content",
                        "search": "/search <query> - Search resources",
                        "categories": "/categories - List all categories",
                        "list": "/list [category] - List resources"
                    },
                    "management": {
                        "title": "‚öôÔ∏è Management Commands:",
                        "stats": "/stats - Show bot statistics",
                        "backup": "/backup - Create manual backup",
                        "cache": "/cache [clear] - Manage cache",
                        "limits": "/limits - Show rate limits",
                        "export": "/export - Export data",
                        "import": "/import - Import data instructions",
                        "clear": "/clear - Clear all data",
                        "security": "/security - Security report",
                        "language": "/language <code> - Change language"
                    },
                    "files": {
                        "title": "üìÅ File Support:",
                        "images": "‚Ä¢ Send images for analysis",
                        "documents": "‚Ä¢ Send documents for processing",
                        "formats": "‚Ä¢ Supports: PDF, TXT, DOCX, images"
                    },
                    "auto": "ü§ñ Automatic classification for any text or links you send!"
                }
            },
            "errors": {
                "rate_limit": "‚ö†Ô∏è Rate limit exceeded. Please wait before trying again.",
                "no_content": "‚ùå Please provide content to classify.",
                "classification_failed": "‚ùå Failed to classify content. Please try again.",
                "not_found": "‚ùå No resources found.",
                "invalid_command": "‚ùå Invalid command. Use /help for available commands.",
                "file_too_large": "‚ùå File is too large. Maximum size: {max_size}MB",
                "unsupported_format": "‚ùå Unsupported file format: {format}",
                "backup_failed": "‚ùå Backup creation failed: {error}",
                "import_failed": "‚ùå Import failed: {error}"
            },
            "success": {
                "added": "‚úÖ Resource added successfully!",
                "backup_created": "‚úÖ Backup created: {filename}",
                "cache_cleared": "‚úÖ Cache cleared successfully!",
                "data_cleared": "‚úÖ All data cleared successfully!",
                "language_changed": "‚úÖ Language changed to {language}",
                "file_processed": "‚úÖ File processed successfully!"
            },
            "categories": {
                "title": "üìÇ Available Categories:",
                "total": "Total: {count} categories",
                "empty": "No categories found."
            },
            "search": {
                "title": "üîç Search Results:",
                "found": "Found {count} results for '{query}':",
                "no_results": "No results found for '{query}'.",
                "showing": "Showing {shown} of {total} results"
            },
            "stats": {
                "title": "üìä Bot Statistics:",
                "resources": "üìö Resources: {count}",
                "categories": "üìÇ Categories: {count}",
                "cache_items": "üíæ Cache items: {count}",
                "files_processed": "üìÅ Files processed: {count}",
                "uptime": "‚è±Ô∏è Uptime: {time}"
            },
            "languages": {
                "available": "üåê Available languages:",
                "current": "Current language: {language}",
                "usage": "Usage: /language <code>\nExample: /language ru"
            }
        }
        
        # Russian translations
        ru_translations = {
            "welcome": {
                "title": "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevDataSorter!",
                "description": "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.",
                "features": {
                    "classify": "‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "sort": "‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    "search": "‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º",
                    "save": "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è",
                    "files": "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    "backup": "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
                },
                "start_help": "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                "instruction": "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏, —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é!"
            },
            "commands": {
                "help": {
                    "title": "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                    "basic": {
                        "title": "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                        "start": "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
                        "help": "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                        "add": "/add <–∫–æ–Ω—Ç–µ–Ω—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é",
                        "search": "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤",
                        "categories": "/categories - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                        "list": "/list [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤"
                    },
                    "management": {
                        "title": "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                        "stats": "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞",
                        "backup": "/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                        "cache": "/cache [clear] - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º",
                        "limits": "/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã",
                        "export": "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                        "import": "/import - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É",
                        "clear": "/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ",
                        "security": "/security - –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                        "language": "/language <–∫–æ–¥> - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
                    },
                    "files": {
                        "title": "üìÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤:",
                        "images": "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                        "documents": "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                        "formats": "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, TXT, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    },
                    "auto": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ!"
                }
            },
            "errors": {
                "rate_limit": "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.",
                "no_content": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                "classification_failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                "not_found": "‚ùå –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                "invalid_command": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                "file_too_large": "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size}–ú–ë",
                "unsupported_format": "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {format}",
                "backup_failed": "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error}",
                "import_failed": "‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {error}"
            },
            "success": {
                "added": "‚úÖ –†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                "backup_created": "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {filename}",
                "cache_cleared": "‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!",
                "data_cleared": "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!",
                "language_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language}",
                "file_processed": "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
            },
            "categories": {
                "title": "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                "total": "–í—Å–µ–≥–æ: {count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                "empty": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            },
            "search": {
                "title": "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
                "found": "–ù–∞–π–¥–µ–Ω–æ {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}':",
                "no_results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                "showing": "–ü–æ–∫–∞–∑–∞–Ω–æ {shown} –∏–∑ {total} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            },
            "stats": {
                "title": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:",
                "resources": "üìö –†–µ—Å—É—Ä—Å—ã: {count}",
                "categories": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {count}",
                "cache_items": "üíæ –≠–ª–µ–º–µ–Ω—Ç—ã –∫—ç—à–∞: {count}",
                "files_processed": "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}",
                "uptime": "‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time}"
            },
            "languages": {
                "available": "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:",
                "current": "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {language}",
                "usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /language <–∫–æ–¥>\n–ü—Ä–∏–º–µ—Ä: /language en"
            }
        }
        
        # Save translation files
        with open(os.path.join(translations_dir, 'en.json'), 'w', encoding='utf-8') as f:
            json.dump(en_translations, f, ensure_ascii=False, indent=2)
        
        with open(os.path.join(translations_dir, 'ru.json'), 'w', encoding='utf-8') as f:
            json.dump(ru_translations, f, ensure_ascii=False, indent=2)
    
    def set_user_language(self, user_id: int, language_code: str) -> bool:
        """Set language for a specific user."""
        if language_code in self.translations:
            self.user_languages[user_id] = language_code
            return True
        return False
    
    def get_user_language(self, user_id: int) -> str:
        """Get language for a specific user."""
        return self.user_languages.get(user_id, self.default_language)
    
    def get_available_languages(self) -> Dict[str, str]:
        """Get list of available languages."""
        return {
            'en': 'English',
            'ru': '–†—É—Å—Å–∫–∏–π'
        }
    
    def t(self, key: str, user_id: int = None, **kwargs) -> str:
        """Translate a key for a specific user or default language."""
        lang = self.get_user_language(user_id) if user_id else self.default_language
        
        # Navigate through nested keys (e.g., "errors.not_found")
        keys = key.split('.')
        value = self.translations.get(lang, {})
        
        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                # Fallback to default language
                value = self.translations.get(self.default_language, {})
                for k in keys:
                    if isinstance(value, dict) and k in value:
                        value = value[k]
                    else:
                        return key  # Return key if translation not found
                break
        
        if isinstance(value, str):
            try:
                return value.format(**kwargs)
            except (KeyError, ValueError):
                return value
        
        return key
    

    
    def get_welcome_message(self, user_id: Optional[int] = None) -> str:
        """Get formatted welcome message."""
        lang = self.get_user_language(user_id) if user_id else self.default_language
        welcome = self.translations.get(lang, {}).get('welcome', {})
        
        if not welcome:
            return "Welcome to DevDataSorter!"
        
        message_parts = [
            welcome.get('title', ''),
            '',
            welcome.get('description', ''),
            '',
            "üìù " + ("What I can do:" if lang == 'en' else "–ß—Ç–æ —è —É–º–µ—é:"),
        ]
        
        features = welcome.get('features', {})
        for feature in features.values():
            message_parts.append(feature)
        
        message_parts.extend([
            '',
            "üöÄ " + welcome.get('start_help', ''),
            '',
            welcome.get('instruction', '')
        ])
        
        return '\n'.join(message_parts)
    
    def get_help_message(self, user_id: Optional[int] = None) -> str:
        """Get formatted help message."""
        lang = self.get_user_language(user_id) if user_id else self.default_language
        commands = self.translations.get(lang, {}).get('commands', {}).get('help', {})
        
        if not commands:
            return "Help information not available."
        
        message_parts = [commands.get('title', '')]
        
        # Basic commands
        basic = commands.get('basic', {})
        if basic:
            message_parts.extend([
                '',
                basic.get('title', ''),
                basic.get('start', ''),
                basic.get('help', ''),
                basic.get('add', ''),
                basic.get('search', ''),
                basic.get('categories', ''),
                basic.get('list', '')
            ])
        
        # Management commands
        management = commands.get('management', {})
        if management:
            message_parts.extend([
                '',
                management.get('title', ''),
                management.get('stats', ''),
                management.get('backup', ''),
                management.get('cache', ''),
                management.get('limits', ''),
                management.get('export', ''),
                management.get('import', ''),
                management.get('clear', ''),
                management.get('security', ''),
                management.get('language', '')
            ])
        
        # File support
        files = commands.get('files', {})
        if files:
            message_parts.extend([
                '',
                files.get('title', ''),
                files.get('images', ''),
                files.get('documents', ''),
                files.get('formats', '')
            ])
        
        message_parts.extend([
            '',
            commands.get('auto', '')
        ])
        
        return '\n'.join(filter(None, message_parts))

# Global instance
_i18n_manager = None

def get_i18n_manager() -> I18nManager:
    """Get global i18n manager instance."""
    global _i18n_manager
    if _i18n_manager is None:
        _i18n_manager = I18nManager()
    return _i18n_manager

def t(key: str, user_id: Optional[int] = None, **kwargs) -> str:
    """Shortcut function for translation."""
    return get_i18n_manager().t(key, user_id, **kwargs)